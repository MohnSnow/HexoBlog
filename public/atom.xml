<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason的博客</title>
  <subtitle>我捉到了一只蟋蟀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jasonlife.top/"/>
  <updated>2018-08-30T09:45:23.779Z</updated>
  <id>http://jasonlife.top/</id>
  
  <author>
    <name>MengDexin</name>
    <email>mengdexin1990@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>32java web会话管理</title>
    <link href="http://jasonlife.top/2018/08/30/32java-web%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"/>
    <id>http://jasonlife.top/2018/08/30/32java-web会话管理/</id>
    <published>2018-08-30T09:45:23.000Z</published>
    <updated>2018-08-30T09:45:23.779Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git ignore 文件解析</title>
    <link href="http://jasonlife.top/2018/08/30/31git-ignore/"/>
    <id>http://jasonlife.top/2018/08/30/31git-ignore/</id>
    <published>2018-08-30T09:42:04.000Z</published>
    <updated>2018-11-28T07:02:54.075Z</updated>
    
    <content type="html"><![CDATA[<p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则.<br>例如：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 此为注释 – 将被 Git 忽略</span></div><div class="line">*.a       <span class="comment"># 忽略所有 .a 结尾的文件</span></div><div class="line">!<span class="class"><span class="keyword">lib</span>.<span class="title">a</span>    <span class="comment"># 但 lib.a 除外</span></span></div><div class="line">/TODO     <span class="comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></div><div class="line">build/    <span class="comment"># 忽略 build/ 目录下的所有文件</span></div><div class="line">doc/*.txt <span class="comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></div></pre></td></tr></table></figure></p>
<p>规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached .</div><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">'update .gitignore'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则.&lt;br&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>30IntegerCache ByteCache CharacterCache LongCache ShortCache</title>
    <link href="http://jasonlife.top/2018/08/30/30IntegerCache-ByteCache-CharacterCache-LongCache-ShortCache/"/>
    <id>http://jasonlife.top/2018/08/30/30IntegerCache-ByteCache-CharacterCache-LongCache-ShortCache/</id>
    <published>2018-08-30T03:25:56.000Z</published>
    <updated>2018-08-30T03:27:29.779Z</updated>
    
    <content type="html"><![CDATA[<p>new Integer(1) 与 Integer.valueOf(1) 的区别</p>
<p>使用 Integer.valueOf(1) 可以使用系统缓存，既减少可能的内存占用，也省去了频繁创建对象的开销。</p>
<p>public static Integer valueOf(int i) {<br>assert IntegerCache.high &gt;= 127;<br> if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>return IntegerCache.cache[i + (-IntegerCache.low)];<br> return new Integer(i);<br>}<br>在[IntegerCache.low, IntegerCache.high] 之前的数字都已被缓存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line">​</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">// high value may be configured by property</span></div><div class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">        String integerCacheHighPropValue =</div><div class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">            i = Math.max(i, <span class="number">127</span>);</div><div class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        high = h;</div><div class="line">​</div><div class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> j = low;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line">    &#125;</div><div class="line">​</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认区间是[-128, 127], 通过 VM 参数-XX:AutoBoxCacheMax=<size> 可以配置缓存的最大值.<br>Short Long Byte Characte也都类似，范围有所不同<br>类<br>区间<br>设置上限<br>Integer<br>[-128,127]<br>-XX:AutoBoxCacheMax=<size><br>Short<br>[-128,127]<br>不可设置<br>Long<br>[-128,127]<br>不可设置<br>Byte<br>[-128,127]<br>不可设置<br>Character<br>[0,127]<br>不可设置</size></size></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;new Integer(1) 与 Integer.valueOf(1) 的区别&lt;/p&gt;
&lt;p&gt;使用 Integer.valueOf(1) 可以使用系统缓存，既减少可能的内存占用，也省去了频繁创建对象的开销。&lt;/p&gt;
&lt;p&gt;public static Integer valu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>29ni真的了解TCP三次握手么？</title>
    <link href="http://jasonlife.top/2018/07/13/29ni%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B9%88%EF%BC%9F/"/>
    <id>http://jasonlife.top/2018/07/13/29ni真的了解TCP三次握手么？/</id>
    <published>2018-07-13T02:27:40.000Z</published>
    <updated>2018-07-13T02:28:05.790Z</updated>
    
    <content type="html"><![CDATA[<p>先来回顾下三次握手里面涉及到的问题:</p>
<ol>
<li><p>当 client 通过 connect 向 server 发出 SYN 包时，client 会维护一个 socket 等待队列，而 server 会维护一个 SYN 队列。</p>
</li>
<li><p>此时进入半链接的状态，如果 socket 等待队列满了，server 则会丢弃，而 client 也会由此返回 connection time out；只要是 client 没有收到 SYN+ACK，3s 之后，client 会再次发送，如果依然没有收到，9s 之后会继续发送。</p>
</li>
<li><p>半连接 syn 队列的长度为 max(64, /proc/sys/net/ipv4/tcp_max_syn_backlog)  决定。</p>
</li>
<li><p>当 server 收到 client 的 SYN 包后，会返回 SYN, ACK 的包加以确认，client 的 TCP 协议栈会唤醒 socket 等待队列，发出 connect 调用。</p>
</li>
<li><p>client 返回 ACK 的包后，server 会进入一个新的叫 accept 的队列，该队列的长度为 min(backlog, somaxconn)，默认情况下，somaxconn 的值为 128，表示最多有 129 的 ESTAB 的连接等待 accept()，而 backlog 的值则由 int listen(int sockfd, int backlog) 中的第二个参数指定，listen 里面的 backlog 的含义请看这里。需要注意的是，一些 Linux 的发型版本可能存在对 somaxcon 错误 truncating 方式。</p>
</li>
<li><p>当 accept 队列满了之后，即使 client 继续向 server 发送 ACK 的包，也会不被相应，此时，server 通过 /proc/sys/net/ipv4/tcp_abort_on_overflow 来决定如何返回，0 表示直接丢弃该 ACK，1 表示发送 RST 通知 client；相应的，client 则会分别返回 read timeout 或者 connection reset by peer。上面说的只是些理论，如果服务器不及时的调用 accept()，当 queue 满了之后，服务器并不会按照理论所述，不再对 SYN 进行应答，返回 ETIMEDOUT。根据这篇文档的描述，实际情况并非如此，服务器会随机的忽略收到的 SYN，建立起来的连接数可以无限的增加，只不过客户端会遇到延时以及超时的情况。</p>
</li>
</ol>
<p>可以看到，整个 TCP stack 有如下的两个 queue:</p>
<ol>
<li><p>一个是 half open(syn queue) queue(max(tcp_max_syn_backlog, 64))，用来保存 SYN_SENT 以及 SYN_RECV 的信息。</p>
</li>
<li><p>另外一个是 accept queue(min(somaxconn, backlog))，保存 ESTAB 的状态，但是调用 accept()。</p>
</li>
</ol>
<p>注意，之前我对 Recv-Q/Send-Q 的理解有些误差，使用 ss 获取到的 Recv-Q/Send-Q 在 LISTEN 状态以及非 LISTEN 状态所表达的含义是不同的。从 tcp_diag.c 源码中可以看到二者的区别:</p>
<p>LISTEN 状态: Recv-Q 表示的当前等待服务端调用 accept 完成三次握手的 listen backlog 数值，也就是说，当客户端通过 connect() 去连接正在 listen() 的服务端时，这些连接会一直处于这个 queue 里面直到被服务端 accept()；Send-Q 表示的则是最大的 listen backlog 数值，这就就是上面提到的 min(backlog, somaxconn) 的值。其余状态: 非 LISTEN 状态之前理解的没有问题。Recv-Q 表示 receive queue 中的 bytes 数量；Send-Q 表示 send queue 中的 bytes 数值。</p>
<p>要理解上面总结的这些，可以参见下这两个案例(1, 2)。 </p>
<p>通过 “SYNs to LISTEN sockets dropped” 以及 “times the listen queue of a socket overflowed” 这两个 netstat -s 获取到的 TCP 状态，可以很快的发现系统存在的一些问题。任何一个包含 “dropped” 或者 “overflowed” 并且数值一直居高不下的 metric 从字面含义理解来看，都不是一个好现象。</p>
<p>对于 Nginx 来说，backlog 的默认值为 511，这个可以通过 ss/netstat 的 Send-Q 确认:State      Recv-Q Send-Q        Local Address:Port          Peer Address:PortLISTEN     0      511                       <em>:80                       </em>:*     </p>
<p>可以通过适当的增大 nginx 的 backlog 以及 somaxconn 来增大队列:listen 80 backlog=1638</p>
<p>上面说了这么多，其实就是为了引入下面这个问题。我们线上一个基于 Netty 的代码，3.5.12 的版本，监控显示 “times the listen queue of a socket overflowed” 常年居高不下，动辄几十 K，通过 ss，我们发现其 backlog 的值只有 50:Recv-Q Send-Q           Local Address:Port               Peer Address:Port   0      50                           <em>:6928                          </em>:*        users:((“java”,454409,196))</p>
<p>g 了一下，发现这个版本复用了 Java 默认的 50 这个值。将其增加到 1024 测试，监控曲线一下子降低到了 0。</p>
<p>除了上面这些，还有一个比较基础的 net.core.netdev_max_backlog，如果内核接受包的速度大于被 userspace 处理的速度，该值定义了可以在接口输入最大的的包数量。</p>
<p>chartbeat 分享了两篇很精彩的文档，其中涉及到了 queue 的一些问题。Lessons learned tuning TCP and Nginx in EC2 1 Lessons learned tuning TCP and Nginx in EC2 2</p>
<p>ref:<a href="http://madalanarayana.wordpress.com/2014/04/13/learnings-on-tcp-syn/" target="_blank" rel="external">http://madalanarayana.wordpress.com/2014/04/13/learnings-on-tcp-syn/</a></p>
<p>RELATED POSTS:</p>
<p>How Many Non-Persistent Connections Can Nginx/Tengine…</p>
<p>tcp_keepalive_time and rst Flag in NAT Environment</p>
<p>Router Matters</p>
<p>通过 tcpcopy(pf_ring) 对 BCM 5719 小包做的多组…</p>
<p>通过 noVNC 实现数千台自助机的实时可视化</p>
<p>参考文档：</p>
<p><a href="http://jaseywang.me/2014/07/20/tcp-queue-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/" target="_blank" rel="external">http://jaseywang.me/2014/07/20/tcp-queue-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</a></p>
<p><a href="https://mp.weixin.qq.com/s/yH3PzGEFopbpA-jw4MythQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/yH3PzGEFopbpA-jw4MythQ</a></p>
<p><a href="https://www.douban.com/note/178129553/" target="_blank" rel="external">https://www.douban.com/note/178129553/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来回顾下三次握手里面涉及到的问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当 client 通过 connect 向 server 发出 SYN 包时，client 会维护一个 socket 等待队列，而 server 会维护一个 SYN 队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POM文件详解</title>
    <link href="http://jasonlife.top/2018/01/15/28POM%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jasonlife.top/2018/01/15/28POM文件详解/</id>
    <published>2018-01-15T12:43:01.000Z</published>
    <updated>2018-01-30T03:01:08.357Z</updated>
    
    <content type="html"><![CDATA[<p>在Java语言中，框架通常是海量的，如果盲目的去学习某个框架，最终的结果就是两败俱伤，学习的人白白浪费了时间和精力，<br>而新的框架又在不断产生，可能今天学习的框架，明天又出了一个更好的。但是有些软件却是非常值得“深究”的，<br>因为他/她总会在某个特定的时刻，让人爱的无法自拔。。。。<br>要学习maven，首先要爱上它，我爱上它的原因是实在无法忍受种种框架依赖的种种jar包。在使用maven以前，<br>例如搭建一个非常熟悉的SSH框架，就首先要去Struts、Spring、Hibernate下载各个sdk，然后参照各自的help文档，来“集合”需要的jar，<br>其中有许多jar只会在特定的条件下才会用到，通常情况下都用不到。而且，有些jar属于第三方的jar，<br>这意味着必须得自己找那些jar，例如commons-xxxx系列。所有jar集齐后，在排除冲突，最后将搭好的框架放在eclipse里测试运行，<br>再看看有哪些问题。这样“千辛万苦”搭好的环境，可能随着其中一个组件版本的变化，例如spring版本的升级，又需要重新在来一次。<br>而且最后搭好的框架光jar可能就几百M。每次向svn上传时，就会特别悲伤。。。。<br><a id="more"></a></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd "</span>&gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 被继承的父项目的构件标识符 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 被继承的父项目的全球唯一标识符 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 被继承的父项目的版本 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span> 4.0.0 <span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> asia.banseon <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.0-SNAPSHOT <span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 项目的名称, Maven产生的文档用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon-maven <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 项目主页的URL, Maven产生的文档用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span> A maven project to study maven. <span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 描述了这个项目构建环境中的前提条件。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 问题管理系统（例如jira）的名字， --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">system</span>&gt;</span> jira <span class="tag">&lt;/<span class="name">system</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 该项目使用的问题管理系统的URL --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://jira.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目持续集成信息 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 持续集成系统的名字，例如continuum --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">system</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 传送通知的途径 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 发生错误时是否通知 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 构建失败时是否通知 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 构建成功时是否通知 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 发生警告时是否通知 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 不赞成使用。通知发送到哪里 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">address</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 扩展配置项 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目相关邮件列表信息 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 邮件的名称 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span> Demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">post</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">post</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 你可以浏览邮件信息的URL --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">archive</span>&gt;</span> http:/hi.baidu.com/banseon/demo/dev/ <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目开发者列表 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">developers</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 某个项目开发者的信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- SCM里项目开发者的唯一标识符 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span> HELLO WORLD <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者的全名 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者的email --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">email</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">email</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者的主页的URL --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span> /&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">roles</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者所属组织 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">organization</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者所属组织的URL --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span> http://hi.baidu.com/banseon <span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者属性，如即时消息如何处理等 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 项目开发者所在时区， -11到12范围内的整数。 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">timezone</span>&gt;</span> -5 <span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目的其他贡献者列表 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">contributors</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 项目的其他贡献者。参见developers/developer元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">email</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">organization</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">organizationUrl</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">roles</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">timezone</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- license用于法律上的名称 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span> Apache 2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 官方的license正文页面的URL --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon/LICENSE-2.0.txt <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 项目分发的主要方式：</span></div><div class="line">    repo，可以从Maven库下载</div><div class="line">    manual， 用户必须手动下载和安装依赖 --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">distribution</span>&gt;</span> repo <span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 关于license的补充信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comments</span>&gt;</span> A business-friendly OSS license <span class="tag">&lt;/<span class="name">comments</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scm</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span> scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk) <span class="tag">&lt;/<span class="name">connection</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span> scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 当前代码的标签，在开发阶段默认为HEAD --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tag</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://svn.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">organization</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 组织的全名 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 组织主页的URL --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 构建项目需要的信息 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">sourceDirectory</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scriptSourceDirectory</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">testSourceDirectory</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 被编译过的测试class文件存放的目录。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">testOutputDirectory</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 使用来自该项目的一系列构建扩展 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 描述使用到的构建扩展。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">extension</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 构建扩展的groupId --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 构建扩展的artifactId --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 构建扩展的版本 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$</span><span class="template-variable">&#123;project.build.outputDirectory&#125;</span><span class="xml"><span class="comment">）。举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 描述存放资源的目录，该路径相对POM路径 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span><span class="tag">&lt;<span class="name">filtering</span> /&gt;</span><span class="tag">&lt;<span class="name">directory</span> /&gt;</span><span class="tag">&lt;<span class="name">includes</span> /&gt;</span><span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 构建产生的所有文件存放的目录 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 产生的构件的文件名，默认值是$</span><span class="template-variable">&#123;artifactId&#125;</span><span class="xml"><span class="comment">-$</span></span><span class="template-variable">&#123;version&#125;</span><span class="xml"><span class="comment">。 --&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 使用的插件列表 。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 使用的插件列表 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span><span class="tag">&lt;<span class="name">version</span> /&gt;</span><span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span><span class="tag">&lt;<span class="name">phase</span> /&gt;</span><span class="tag">&lt;<span class="name">goals</span> /&gt;</span><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">goals</span> /&gt;</span><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 根据环境参数或命令行参数激活某个构建处理 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它</span></div><div class="line"></div><div class="line">  能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- profile默认是否激活的标志 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">activeByDefault</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">jdk</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">os</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 激活profile的操作系统的名字 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span> Windows XP <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 激活profile的操作系统所属家族(如 'windows') --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">family</span>&gt;</span> Windows <span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 激活profile的操作系统体系结构 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">arch</span>&gt;</span> x86 <span class="tag">&lt;/<span class="name">arch</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 激活profile的操作系统版本 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span> 5.1.2600 <span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">os</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 如果Maven检测到某一个属性（其值可以在POM中通过$</span><span class="template-variable">&#123;名称&#125;</span><span class="xml"><span class="comment">引用），其拥有对应的名称和值，Profile就会被激活。如果值</span></span></div><div class="line"></div><div class="line">  字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 激活profile的属性的名称 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span> mavenVersion <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 激活profile的属性的值 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span> 2.0.3 <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活</span></div><div class="line"></div><div class="line">  profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">file</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 如果指定的文件存在，则激活profile。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">exists</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">exists</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 如果指定的文件不存在，则激活profile。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">missing</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">missing</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 构建项目所需要的信息。参见build元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span><span class="tag">&lt;<span class="name">filtering</span> /&gt;</span><span class="tag">&lt;<span class="name">directory</span> /&gt;</span><span class="tag">&lt;<span class="name">includes</span> /&gt;</span><span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span><span class="tag">&lt;<span class="name">filtering</span> /&gt;</span><span class="tag">&lt;<span class="name">directory</span> /&gt;</span><span class="tag">&lt;<span class="name">includes</span> /&gt;</span><span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">directory</span> /&gt;</span><span class="tag">&lt;<span class="name">finalName</span> /&gt;</span><span class="tag">&lt;<span class="name">filters</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span><span class="tag">&lt;<span class="name">version</span> /&gt;</span><span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span><span class="tag">&lt;<span class="name">phase</span> /&gt;</span><span class="tag">&lt;<span class="name">goals</span> /&gt;</span><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">goals</span> /&gt;</span><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span><span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span><span class="tag">&lt;<span class="name">version</span> /&gt;</span><span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span><span class="tag">&lt;<span class="name">phase</span> /&gt;</span><span class="tag">&lt;<span class="name">goals</span> /&gt;</span><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">goals</span> /&gt;</span><span class="tag">&lt;<span class="name">inherited</span> /&gt;</span><span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见repositories/repository元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span><span class="tag">&lt;<span class="name">name</span> /&gt;</span><span class="tag">&lt;<span class="name">url</span> /&gt;</span><span class="tag">&lt;<span class="name">layout</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span><span class="tag">&lt;<span class="name">name</span> /&gt;</span><span class="tag">&lt;<span class="name">url</span> /&gt;</span><span class="tag">&lt;<span class="name">layout</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencyManagement元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见distributionManagement元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见properties元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 包含需要连接到远程仓库的信息 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 如何处理远程仓库里发布版本的下载 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">releases</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 远程仓库URL，按protocol://hostname/path形式 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://192.168.1.169:9999/repository/ <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">layout</span>&gt;</span> default <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 依赖的group ID --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.apache.maven <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 依赖的artifact ID --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> maven-artifact <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span> 3.8.1 <span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。</span></div><div class="line"></div><div class="line">  - compile ：默认范围，用于编译</div><div class="line"></div><div class="line">  - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath</div><div class="line"></div><div class="line">  - runtime: 在执行时需要使用</div><div class="line"></div><div class="line">  - test: 用于test任务时使用</div><div class="line"></div><div class="line">  - system: 需要外在提供相应的元素。通过systemPath来取得</div><div class="line"></div><div class="line">  - systemPath: 仅用于范围为system。提供相应的路径</div><div class="line"></div><div class="line">  - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span> test <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$</span><span class="template-variable">&#123;java.home&#125;</span><span class="xml"><span class="comment">。 --&gt;</span></span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> spring-core <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.springframework <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span> true <span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 所有产生的报表存放到哪里。默认值是$</span><span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml"><span class="comment">/site。 --&gt;</span></span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 使用的报表插件和他们的配置。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- plugin元素包含描述报表插件需要的信息 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 报表插件在仓库里的group ID --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 报表插件在仓库里的artifact ID --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 被使用的报表插件的版本（或版本范围） --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">version</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 报表插件的配置 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 表示报表的一个集合，以及产生该集合的配置 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 报表集合的唯一标识符，POM继承时用到 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 产生报表集合时，被使用的报表的配置 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 配置是否被继承到子POMs --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 这个集合里使用到哪些报表 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 部署项目产生的构件到远程仓库需要的信息 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon maven2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span> file://$<span class="template-variable">&#123;basedir&#125;</span><span class="xml">/target/deploy <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span> Banseon-maven2 Snapshot Repository <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span> scp://svn.baidu.com/banseon:/usr/local/maven-snapshot <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 部署项目的网站需要的信息 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-site <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 部署位置的名称 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span> business api website <span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 部署位置的URL，按protocol://hostname/path形式 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">  scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 构件新的group ID --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 构件新的artifact ID --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 构件新的版本号 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">version</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">message</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">status</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java语言中，框架通常是海量的，如果盲目的去学习某个框架，最终的结果就是两败俱伤，学习的人白白浪费了时间和精力，&lt;br&gt;而新的框架又在不断产生，可能今天学习的框架，明天又出了一个更好的。但是有些软件却是非常值得“深究”的，&lt;br&gt;因为他/她总会在某个特定的时刻，让人爱的无法自拔。。。。&lt;br&gt;要学习maven，首先要爱上它，我爱上它的原因是实在无法忍受种种框架依赖的种种jar包。在使用maven以前，&lt;br&gt;例如搭建一个非常熟悉的SSH框架，就首先要去Struts、Spring、Hibernate下载各个sdk，然后参照各自的help文档，来“集合”需要的jar，&lt;br&gt;其中有许多jar只会在特定的条件下才会用到，通常情况下都用不到。而且，有些jar属于第三方的jar，&lt;br&gt;这意味着必须得自己找那些jar，例如commons-xxxx系列。所有jar集齐后，在排除冲突，最后将搭好的框架放在eclipse里测试运行，&lt;br&gt;再看看有哪些问题。这样“千辛万苦”搭好的环境，可能随着其中一个组件版本的变化，例如spring版本的升级，又需要重新在来一次。&lt;br&gt;而且最后搭好的框架光jar可能就几百M。每次向svn上传时，就会特别悲伤。。。。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>web.xml详解</title>
    <link href="http://jasonlife.top/2017/12/27/27web-xml%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jasonlife.top/2017/12/27/27web-xml详解/</id>
    <published>2017-12-27T08:12:43.000Z</published>
    <updated>2018-01-16T03:35:05.950Z</updated>
    
    <content type="html"><![CDATA[<p>一  web.xml常用配置文件元素及其意义概览<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--定义了WEB应用的名字--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--声明WEB应用的描述信息--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--context-param元素声明应用范围内的初始化参数--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">context-param</span>&gt;</span><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">filter</span>&gt;</span><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--servlet API的版本2.3增加了对事件监听程序的支持，事件监听程序在建立、修改和删除会话或servlet环境时得到通知。</span></div><div class="line">         Listener元素指出事件监听程序类--&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">listener</span>&gt;</span><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。</span></div><div class="line">         Servlet元素就是用来完成此项任务的--&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">servlet</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--服务器一般为servlet提供一个缺省的URL：http://host/webAppPrefix/servlet/ServletName。</span></div><div class="line">         但是，常常会更改这个URL，以便servlet可以访问初始化参数或更容易地处理相对URL。</div><div class="line">         在更改缺省URL时，使用servlet-mapping元素--&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--如果某个会话在一定时间内未被访问，服务器可以抛弃它以节省内存。可通过使用HttpSession的</span></div><div class="line">         setMaxInactiveInterval方法明确设置单个会话对象的超时值，或者可利用session-config元素制定缺省超时值--&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">session-config</span>&gt;</span><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--如果Web应用具有想到特殊的文件，希望能保证给他们分配特定的MIME类型，则mime-mapping元素提供这种保证--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">mime-mapping</span>&gt;</span><span class="tag">&lt;/<span class="name">mime-mapping</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--指示服务器在收到引用一个目录名而不是文件名的URL时，使用哪个文件--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--在返回特定HTTP状态代码时，或者特定类型的异常被抛出时，能够制定将要显示的页面--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">error-page</span>&gt;</span><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--对标记库描述符文件（Tag Libraryu Descriptor file）指定别名。此功能使你能够更改TLD文件的位置，</span></div><div class="line">         而不用编辑使用这些文件的JSP页面--&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">taglib</span>&gt;</span><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--声明与资源相关的一个管理对象--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">resource-env-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">resource-env-ref</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--声明一个资源工厂使用的外部资源--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--制定应该保护的URL。它与login-config元素联合使用--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--指定服务器应该怎样给试图访问受保护页面的用户授权。它与sercurity-constraint元素联合使用--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">login-config</span>&gt;</span><span class="tag">&lt;/<span class="name">login-config</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--给出安全角色的一个列表，这些角色将出现在servlet元素内的security-role-ref元素的role-name子元素中。</span></div><div class="line">         分别地声明角色可使高级IDE处理安全信息更为容易--&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">security-role</span>&gt;</span><span class="tag">&lt;/<span class="name">security-role</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--声明Web应用的环境项--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">env-entry</span>&gt;</span><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--声明一个EJB的主目录的引用--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">ejb-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">ejb-ref</span>&gt;</span></div><div class="line"></div><div class="line">     <span class="comment">&lt;!--声明一个EJB的本地主目录的应用--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">ejb-local-ref</span>&gt;</span><span class="tag">&lt;/<span class="name">ejb-local-ref</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>二、各个配置文件详解<br> 2.1 Web应用名称：提供GUI工具可能会用来标记这个特定应用的一个名称</p>
<p><display-name>Tomcat Example</display-name></p>
<p> 2.2 Web应用描述：给出与此应用相关的说明性文本</p>
<disciption>Tomcat Example servlets and JSP pages.</disciption>


<p>2.3上下文参数：生命应用范围内的初始化参数</p>
<p><context-param><br>    <param-name>参数名<br>    <param-value>参数值</param-value><br>    <description>参数描述</description><br></param-name></context-param><br>可以通过sce.getServletContex.getInitParameter(“参数名”)获得参数的取值，其中sce是一个ServletContexEvent实例，可以在容器开启时执行连接数据库等操作。</p>
<p>2.4过滤器配置：在请求和相应对象在Servlet处理之前或之后，可以通过此此过滤器对两个对象进行处理。</p>
<pre><code> filter-class 中指定的过滤器类须继承 javax.servlet.Filter 具有须有以下三种方法

         init(FilterConfig filterConfig)：初始化;一般情况下时读取配置文件中的init-param参数值 如 filterConfig.getInitParameter(&quot;encoding&quot;)

         doFilter(...)：用于对request,response进行处理，并能过chain.doFilter(...) 交过下一个控制器

        destroy()：资源销毁

例如编码过滤器：
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.my.app.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>java代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">*</div><div class="line">*/</div><div class="line"><span class="keyword">package</span> com.myapp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@author</span> louisliao</div><div class="line">*</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 配置中默认的字符编码</div><div class="line">	*/</div><div class="line">	<span class="keyword">protected</span> String encoding = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">protected</span> FilterConfig filterConfig;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 当没有指定默认编码时是否允许跳过过滤</div><div class="line">	*/</div><div class="line">	<span class="keyword">protected</span> <span class="keyword">boolean</span> ignore = <span class="keyword">true</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	*</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EncodingFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* (non-Javadoc)</span></div><div class="line">	* @see javax.servlet.Filter#destroy()</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">this</span>.encoding=<span class="keyword">null</span>;</div><div class="line">		<span class="keyword">this</span>.filterConfig=<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* (non-Javadoc)</span></div><div class="line">	* @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		HttpServletRequest hRequest=(HttpServletRequest)request;</div><div class="line">		HttpServletResponse hResponse=(HttpServletResponse)response;</div><div class="line">		<span class="comment">//Conditionally select and set the character encoding to be used</span></div><div class="line">		<span class="keyword">if</span>(ignore || hRequest.getCharacterEncoding()==<span class="keyword">null</span>)&#123;</div><div class="line">			String coding=selectEncoding(hRequest);</div><div class="line">			<span class="keyword">if</span>(coding!=<span class="keyword">null</span>)&#123;</div><div class="line">				hRequest.setCharacterEncoding(coding);</div><div class="line">				hResponse.setCharacterEncoding(coding);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//将控制器传向下一个filter</span></div><div class="line">		chain.doFilter(hRequest, hResponse);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* (non-Javadoc)</span></div><div class="line">	* @see javax.servlet.Filter#init(javax.servlet.FilterConfig)</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">this</span>.filterConfig=filterConfig;</div><div class="line">		<span class="keyword">this</span>.encoding=filterConfig.getInitParameter(<span class="string">"encoding"</span>);</div><div class="line">		System.out.println(<span class="keyword">this</span>.encoding);</div><div class="line">		String value = filterConfig.getInitParameter(<span class="string">"ignore"</span>);</div><div class="line">		<span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.ignore = <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.equalsIgnoreCase(<span class="string">"true"</span>)) &#123;</div><div class="line">			<span class="keyword">this</span>.ignore = <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.equalsIgnoreCase(<span class="string">"yes"</span>)) &#123;</div><div class="line">			<span class="keyword">this</span>.ignore = <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.ignore = <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">selectEncoding</span><span class="params">(ServletRequest request)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (<span class="keyword">this</span>.encoding);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>init方法是在WEB应用启动就会调用,doFilter则是在访问filter-mapping映射到的url时会调用。<br>2.5 监听器配置：<br>Servlet监听器是Servlet规范中定义的一种特殊类，用于监听ServletContext、HttpSession和ServletRequest等域对象的创建与销毁事件，以及监听这些域对象中属性发生修改的事件。</p>
<p>监听对象：</p>
<p>1、ServletContext：application，整个应用只存在一个</p>
<p>2、HttpSession：session，针对每一个对话</p>
<p>3、ServletRequest：request，针对每一个客户请求</p>
<p>监听内容：创建、销毁、属性改变事件</p>
<p>监听作用：可以在事件发生前、发生后进行一些处理，一般可以用来统计在线人数和在线用户、统计网站访问量、系统启动时初始化信息等。</p>
<p><listener><br>    <listerner-class>org.springframework.web.context.ContextLoaderListener<br></listerner-class></listener><br>监听器的分类：</p>
<p>用于监听应用程序环境对象(ServletContext)的事件监听器，实现ServletContextListener、ServletContextAttributeListener接口<br>用于监听用户会话对象(HttpSeesion)的事件监听器，实现HttpSessionListener、HttpSessionAttributeListener接口<br>用于监听请求消息对象(ServletRequest)的事件监听器，实现ServletRequestListener、ServletRequestAttributeListener接口<br>2.6 Servlet配置：</p>
<p><servlet><br>     <servlet-name>servlet名称</servlet-name><br>     <servlet-class>servlet类全路径</servlet-class><br>     <init-param><br>         <param-name>参数名</param-name><br>         <param-value>参数值</param-value><br>     </init-param><br>     <run-as><br>         <description>Security role for anonymous access</description><br>         <role-name>tomcat</role-name><br>     </run-as><br>  　 <load-on-startup>指定当Web应用启动时，装载Servlet的次序</load-on-startup><br></servlet></p>
<p><servlet-mapping><br>    <servlet-name>servlet名称</servlet-name><br>    <url-pattern>映射路径</url-pattern><br></servlet-mapping><br>2.7 会话超时配置（单位为分钟）：<br>设置session的有效期，单位分钟</p>
<p><session-config><br>     <session-timeout>120</session-timeout><br></session-config><br>2.8 Web应用图标：指出IDE和GUI工具用来表示Web应用的大图标和小图标<br> <icon><br>      <small-icon>/images/app_small.gif</small-icon><br>      <large-icon>/images/app_large.gif</large-icon><br></icon></p>
<p>2.9 MIME类型配置：</p>
<p><mime-mapping><br>     <extension>htm</extension><br>     <mime-type>text/html</mime-type><br></mime-mapping></p>
<p>2.10指定欢迎页面配置</p>
<p><welcome-file-list><br>     <welcome-file>index.jsp</welcome-file><br>     <welcome-file>index.html</welcome-file><br>     <welcome-file>index.htm</welcome-file><br></welcome-file-list></p>
<p>2.11配置错误页面<br>通过错误码来配置error-page</p>
<!--配置了当系统发生404错误时，跳转到错误处理页面NotFound.jsp-->
<p><error-page><br>      <error-code>404</error-code><br>      <location>/NotFound.jsp</location><br></error-page><br>通过异常类型来配置error-page</p>
<!--配置了当系统发生java.lang.NullException（即空指针异常）时，跳转到错误处理页面error.jsp-->
<p><error-page><br>      <exception-type>java.lang.NullException</exception-type><br>      <location>/error.jsp</location><br></error-page><br>2.12TLD配置：</p>
<taglib><br>    <taglib-uri><a href="http://jakarta.apache.org/tomcat/debug-taglib" target="_blank" rel="external">http://jakarta.apache.org/tomcat/debug-taglib</a></taglib-uri><br>    <taglib-location>/WEB-INF/jsp/debug-taglib.tld</taglib-location><br></taglib>


<p>2.13资源管理对象配置<br> <resource-env-ref><br>      <resource-env-ref-name>jms/StockQueue</resource-env-ref-name><br> </resource-env-ref></p>
<p>2.14资源工厂配置<br> <resource-ref><br>      <res-ref-name>mail/Session</res-ref-name><br>      <res-type>javax.mail.Session</res-type><br>      <res-auth>Container</res-auth><br> </resource-ref></p>
<p>2.15安全限制配置<br> <security-constraint><br>       <display-name>Example Security Constraint</display-name><br>       <web-resource-collection><br>           <web-resource-name>Protected Area</web-resource-name><br>           <url-pattern>/jsp/security/protected/*</url-pattern><br>           <http-method>DELETE</http-method><br>           <http-method>GET</http-method><br>           <http-method>POST</http-method><br>           <http-method>PUT</http-method><br>       </web-resource-collection><br>       <auth-constraint><br>           <role-name>tomcat</role-name><br>           <role-name>role1</role-name><br>       </auth-constraint><br> </security-constraint></p>
<p>2.16登录验证配置</p>
<p><login-config><br>     <auth-method>FORM</auth-method><br>     <realm-name>Example-Based Authentiation Area</realm-name><br>   <form-login-config><br>          <form-login-page>/jsp/security/protected/login.jsp</form-login-page><br>          <form-error-page>/jsp/security/protected/error.jsp</form-error-page><br>     </form-login-config><br></login-config></p>
<p>2.17安全角色：security-role元素给出安全角色的一个列表，这些角色将出现在servlet元素内的security-role-ref元素的role-name子元素中。<br>分别地声明角色可使高级IDE处理安全信息更为容易。</p>
<p><security-role><br>     <role-name>tomcat</role-name><br></security-role></p>
<p>2.18Web环境参数：env-entry元素生命Web应用的环境项</p>
<p><env-entry><br>     <env-entry-name>minExemptions</env-entry-name><br>     <env-entry-value>1</env-entry-value><br>     <env-entry-type>java.lang.Integer</env-entry-type><br></env-entry></p>
<p>2.19EJB声明</p>
<p><ejb-ref><br>     <description>Example EJB reference<br>     <ejb-ref-name>ejb/Account</ejb-ref-name><br>     <ejb-ref-type>Entity</ejb-ref-type><br>     <home>com.mycompany.mypackage.AccountHome</home><br>     <remote>com.mycompany.mypackage.Account</remote><br></description></ejb-ref></p>
<p>2.20本地EJB声明</p>
<p><ejb-local-ref><br>     <description>Example Loacal EJB reference<br>     <ejb-ref-name>ejb/ProcessOrder</ejb-ref-name><br>     <ejb-ref-type>Session</ejb-ref-type><br>     <local-home>com.mycompany.mypackage.ProcessOrderHome</local-home><br>     <local>com.mycompany.mypackage.ProcessOrder</local><br></description></ejb-local-ref></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一  web.xml常用配置文件元素及其意义概览&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>26Java面试题</title>
    <link href="http://jasonlife.top/2017/11/16/26Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://jasonlife.top/2017/11/16/26Java面试题/</id>
    <published>2017-11-16T06:49:51.000Z</published>
    <updated>2018-01-16T03:35:05.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java面试资源"><a href="#Java面试资源" class="headerlink" title="Java面试资源"></a>Java面试资源</h1><p>这里汇总整理了网络上的Java面试题，持续更新<br><a id="more"></a></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>操作系统中 heap 和 stack 的区别</li>
<li>什么是基于注解的切面实现</li>
<li>什么是 对象/关系 映射集成模块</li>
<li>什么是 Java 的反射机制</li>
<li>什么是 ACID</li>
<li>BS与CS的联系与区别</li>
<li>Cookie 和 Session的区别</li>
<li>fail-fast 与 fail-safe 机制有什么区别</li>
<li>get 和 post请求的区别</li>
<li>Interface 与 abstract 类的区别</li>
<li>IOC的优点是什么</li>
<li>IO 和 NIO的区别，NIO优点</li>
<li>Java 8 / Java 7 为我们提供了什么新功能</li>
<li>什么是竞态条件？ 举个例子说明。</li>
<li>JRE、JDK、JVM 及 JIT 之间有什么不同</li>
<li>MVC的各个部分都有那些技术来实现?如何实现?</li>
<li>RPC 通信和 RMI 区别</li>
<li>什么是 Web Service（Web服务）</li>
<li>JSWDL开发包的介绍。JAXP、JAXM的解释。SOAP、UDDI,WSDL解释。</li>
<li>WEB容器主要有哪些功能? 并请列出一些常见的WEB容器名字。</li>
<li>一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制</li>
<li>简单说说你了解的类加载器。是否实现过类加载器</li>
<li>解释一下什么叫AOP（面向切面编程）</li>
<li>请简述 Servlet 的生命周期及其相关的方法</li>
<li>请简述一下 Ajax 的原理及实现步骤</li>
<li>简单描述Struts的主要功能</li>
<li>什么是 N 层架构</li>
<li>什么是CORBA？用途是什么</li>
<li>什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”</li>
<li>什么是正则表达式？用途是什么？哪个包使用正则表达式来实现模式匹配</li>
<li>什么是懒加载（Lazy Loading）</li>
<li>什么是尾递归，为什么需要尾递归</li>
<li>什么是控制反转（Inversion of Control）与依赖注入（Dependency Injection）</li>
</ul>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li>finalize<ul>
<li>什么是finalize()方法<ul>
<li>finalize()方法什么时候被调用</li>
<li>析构函数(finalization)的目的是什么</li>
<li>final 和 finalize 的区别</li>
<li>final</li>
</ul>
</li>
<li>final关键字有哪些用法<ul>
<li>final 与 static 关键字可以用于哪里？它们的作用是什么</li>
<li>final, finally, finalize的区别</li>
<li>final、finalize 和 finally 的不同之处？</li>
</ul>
</li>
<li>能否在运行时向 static final 类型的赋值<ul>
<li>使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变</li>
<li>一个类被声明为final类型，表示了什么意思</li>
<li>throws, throw, try, catch, finally分别代表什么意义</li>
</ul>
</li>
</ul>
</li>
<li>Java 有几种修饰符？分别用来修饰什么</li>
<li>volatile<ul>
<li>volatile 修饰符的有过什么实践</li>
<li>volatile 变量是什么？volatile 变量和 atomic 变量有什么不同</li>
<li>volatile 类型变量提供什么保证？能使得一个非原子操作变成原子操作吗</li>
<li>能创建 volatile 数组吗？</li>
</ul>
</li>
<li>transient变量有什么特点</li>
<li>super什么时候使用</li>
<li>public static void 写成 static public void会怎样</li>
<li>说明一下public static void main(String args[])这段声明里每个关键字的作用</li>
<li>请说出作用域public, private, protected, 以及不写时的区别</li>
<li>sizeof 是Java 的关键字吗</li>
<li>static<ul>
<li>static class 与 non static class的区别</li>
<li>static 关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法</li>
<li>静态类型有什么特点</li>
<li>main() 方法为什么必须是静态的？能不能声明 main() 方法为非静态</li>
<li>是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用</li>
<li>静态变量在什么时候加载？编译期还是运行期？静态代码块加载的时机呢</li>
<li>成员方法是否可以访问静态变量？为什么静态方法不能访问成员变量</li>
</ul>
</li>
<li>switch<ul>
<li>switch 语句中的表达式可以是什么类型数据</li>
<li>switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上</li>
</ul>
</li>
<li>while 循环和 do 循环有什么不同</li>
</ul>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul>
<li>&amp;操作符和&amp;&amp;操作符有什么区别?</li>
<li>a = a + b 与 a += b 的区别？</li>
<li>逻辑操作符 (&amp;,|,^)与条件操作符(&amp;&amp;,||)的区别</li>
<li>3*0.1 == 0.3 将会返回什么？true 还是 false？</li>
<li>float f=3.4; 是否正确？</li>
<li>short s1 = 1; s1 = s1 + 1;有什么错?</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul>
<li>基础类型(Primitives)<ul>
<li>基础类型(Primitives)与封装类型(Wrappers)的区别在哪里</li>
<li>简述九种基本数据类型的大小，以及他们的封装类</li>
<li>int 和 Integer 哪个会占用更多的内存？ int 和 Integer 有什么区别？parseInt()函数在什么时候使用到</li>
<li>float和double的默认值是多少</li>
<li>如何去小数四舍五入保留小数点后两位</li>
<li>char 型变量中能不能存贮一个中文汉字，为什么</li>
</ul>
</li>
<li>类型转换<ul>
<li>怎样将 bytes 转换为 long 类型</li>
<li>怎么将 byte 转换为 String</li>
<li>如何将数值型字符转换为数字</li>
<li>我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象</li>
<li>能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗</li>
<li>类型向下转换是什么</li>
</ul>
</li>
<li>数组<ul>
<li>如何权衡是使用无序的数组还是有序的数组</li>
<li>怎么判断数组是 null 还是为空</li>
<li>怎么打印数组？ 怎样打印数组中的重复元素</li>
<li>Array 和 ArrayList有什么区别？什么时候应该使用Array而不是ArrayList</li>
<li>数组和链表数据结构描述，各自的时间复杂度</li>
<li>数组有没有length()这个方法? String有没有length()这个方法</li>
</ul>
</li>
<li>队列<ul>
<li>队列和栈是什么，列出它们的区别</li>
<li>BlockingQueue是什么</li>
<li>简述 ConcurrentLinkedQueue LinkedBlockingQueue 的用处和不同之处。</li>
</ul>
</li>
<li>ArrayList、Vector、LinkedList的存储性能和特性</li>
<li>String</li>
<li>StringBuffer<ul>
<li>ByteBuffer 与 StringBuffer有什么区别</li>
</ul>
</li>
<li>HashMap<ul>
<li>HashMap的工作原理是什么</li>
<li>内部的数据结构是什么</li>
<li>HashMap 的 table的容量如何确定？loadFactor 是什么？ 该容量如何变化？这种变化会带来什么问题？</li>
<li>HashMap 实现的数据结构是什么？如何实现</li>
<li>HashMap 和 HashTable、ConcurrentHashMap 的区别</li>
<li>HashMap的遍历方式及效率</li>
<li>HashMap、LinkedMap、TreeMap的区别</li>
<li>如何决定选用HashMap还是TreeMap</li>
<li>如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办</li>
<li>HashMap 是线程安全的吗？并发下使用的 Map 是什么，它们内部原理分别是什么，比如存储方式、 hashcode、扩容、 默认容量等</li>
</ul>
</li>
<li>HashSet<ul>
<li>HashSet和TreeSet有什么区别</li>
<li>HashSet 内部是如何工作的</li>
<li>WeakHashMap 是怎么工作的？</li>
</ul>
</li>
<li>Set<ul>
<li>Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢？是用 == 还是 equals()？ 它们有何区别?</li>
<li>TreeMap：TreeMap 是采用什么树实现的？TreeMap、HashMap、LindedHashMap的区别。TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？</li>
<li>TreeSet：一个已经构建好的 TreeSet，怎么完成倒排序。</li>
<li>EnumSet 是什么</li>
</ul>
</li>
<li>Hash算法<ul>
<li>Hashcode 的作用</li>
<li>简述一致性 Hash 算法</li>
<li>有没有可能 两个不相等的对象有相同的 hashcode？当两个对象 hashcode 相同怎么办？如何获取值对象</li>
<li>为什么在重写 equals 方法的时候需要重写 hashCode 方法？equals与 hashCode 的异同点在哪里</li>
<li>a.hashCode() 有什么用？与 a.equals(b) 有什么关系</li>
<li>hashCode() 和 equals() 方法的重要性体现在什么地方</li>
<li>Object：Object有哪些公用方法？Object类hashcode,equals 设计原则？ sun为什么这么设计？Object类的概述</li>
<li>如何在父类中为子类自动完成所有的 hashcode 和 equals 实现？这么做有何优劣。</li>
<li>可以在 hashcode() 中使用随机数字吗？</li>
</ul>
</li>
<li>LinkedHashMap<ul>
<li>LinkedHashMap 和 PriorityQueue 的区别是什么</li>
</ul>
</li>
<li>List<ul>
<li>List, Set, Map三个接口，存取元素时各有什么特点</li>
<li>List, Set, Map 是否继承自 Collection 接口</li>
<li>遍历一个 List 有哪些不同的方式</li>
<li>LinkedList<ul>
<li>LinkedList 是单向链表还是双向链表</li>
<li>LinkedList 与 ArrayList 有什么区别</li>
<li>描述下 Java 中集合（Collections），接口（Interfaces），实现（Implementations）的概念。LinkedList 与 ArrayList 的区别是什么？</li>
<li>插入数据时，ArrayList, LinkedList, Vector谁速度较快？</li>
</ul>
</li>
<li>ArrayList<ul>
<li>ArrayList 和 HashMap 的默认大小是多数</li>
<li>ArrayList 和 LinkedList 的区别，什么时候用 ArrayList？</li>
<li>ArrayList 和 Set 的区别？</li>
<li>ArrayList, LinkedList, Vector的区别</li>
<li>ArrayList是如何实现的，ArrayList 和 LinkedList 的区别</li>
<li>ArrayList如何实现扩容</li>
<li>Array 和 ArrayList 有何区别？什么时候更适合用Array</li>
<li>说出ArraList,Vector, LinkedList的存储性能和特性</li>
</ul>
</li>
</ul>
</li>
<li>Map<ul>
<li>Map, Set, List, Queue, Stack</li>
<li>Map 接口提供了哪些不同的集合视图</li>
<li>为什么 Map 接口不继承 Collection 接口</li>
</ul>
</li>
<li>Collections<ul>
<li>介绍Java中的Collection FrameWork。集合类框架的基本接口有哪些</li>
<li>Collections类是什么？Collection 和 Collections的区别？Collection、Map的实现</li>
<li>集合类框架的最佳实践有哪些</li>
<li>为什么 Collection 不从 Cloneable 和 Serializable 接口继承</li>
<li>说出几点 Java 中使用 Collections 的最佳实践？</li>
<li>Collections 中 遗留类 (HashTable、Vector) 和 现有类的区别</li>
</ul>
</li>
<li>什么是 B+树，B-树，列出实际的使用场景。</li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul>
<li>Comparator 与 Comparable 接口是干什么的？列出它们的区别</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>拷贝(clone)<ul>
<li>如何实现对象克隆</li>
<li>深拷贝和浅拷贝区别</li>
<li>深拷贝和浅拷贝如何实现激活机制</li>
<li>写clone()方法时，通常都有一行代码，是什么</li>
</ul>
</li>
<li>比较<ul>
<li>在比较对象时，”==” 运算符和 equals 运算有何区别</li>
<li>如果要重写一个对象的equals方法，还要考虑什么</li>
<li>两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对</li>
</ul>
</li>
<li>构造器<ul>
<li>构造器链是什么</li>
<li>创建对象时构造器的调用顺序</li>
</ul>
</li>
<li>不可变对象<ul>
<li>什么是不可变象（immutable object）</li>
<li>为什么 Java 中的 String 是不可变的（Immutable）</li>
<li>如何构建不可变的类结构？关键点在哪里</li>
<li>能创建一个包含可变对象的不可变对象吗</li>
</ul>
</li>
<li>如何对一组对象进行排序</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li>构造器（constructor）是否可被重写（override）</li>
<li>方法可以同时即是 static 又是 synchronized 的吗</li>
<li>abstract 的 method是否可同时是 static，是否可同时是 native，是否可同时是synchronized</li>
<li>Java支持哪种参数传递类型</li>
<li>一个对象被当作参数传递到一个方法，是值传递还是引用传递</li>
<li>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递</li>
<li>我们能否重载main()方法</li>
<li>如果main方法被声明为private会怎样</li>
</ul>
<h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><ul>
<li>概念<ul>
<li>GC是什么？为什么要有GC</li>
<li>什么时候会导致垃圾回收</li>
<li>GC是怎么样运行的</li>
<li>新老以及永久区是什么</li>
<li>GC 有几种方式？怎么配置</li>
<li>什么时候一个对象会被GC？ 如何判断一个对象是否存活</li>
<li>System.gc()  Runtime.gc()会做什么事情？  能保证 GC 执行吗</li>
<li>垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？</li>
<li>Minor GC 、Major GC、Young GC 与 Full GC分别在什么时候发生</li>
<li>垃圾回收算法的实现原理</li>
<li>如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？</li>
<li>垃圾回收的最佳做法是什么</li>
</ul>
</li>
<li>GC收集器有哪些<ul>
<li>垃圾回收器的基本原理是什么？</li>
<li>串行(serial)收集器和吞吐量(throughput)收集器的区别是什么<ul>
<li>Serial 与 Parallel GC之间的不同之处</li>
<li>CMS 收集器 与 G1 收集器的特点与区别</li>
<li>CMS垃圾回收器的工作过程</li>
<li>JVM 中一次完整的 GC 流程是怎样的？ 对象如何晋升到老年代</li>
<li>吞吐量优先和响应优先的垃圾收集器选择</li>
</ul>
</li>
</ul>
</li>
<li>GC策略<ul>
<li>举个实际的场景，选择一个GC策略</li>
<li>JVM的永久代中会发生垃圾回收吗</li>
</ul>
</li>
<li>收集方法<ul>
<li>标记清除、标记整理、复制算法的原理与特点？分别用在什么地方</li>
<li>如果让你优化收集方法，有什么思路</li>
</ul>
</li>
</ul>
<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ul>
<li>参数<ul>
<li>说说你知道的几种主要的jvm 参数</li>
<li>-XX:+UseCompressedOops 有什么作用</li>
</ul>
</li>
<li>类加载器(ClassLoader)<ul>
<li>Java 类加载器都有哪些</li>
<li>JVM如何加载字节码文件</li>
</ul>
</li>
<li>内存管理<ul>
<li>JVM内存分哪几个区，每个区的作用是什么</li>
<li>一个对象从创建到销毁都是怎么在这些部分里存活和转移的</li>
<li>解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法</li>
<li>JVM中哪个参数是用来控制线程的栈堆栈小</li>
<li>简述内存分配与回收策略</li>
<li>简述重排序，内存屏障，happen-before，主内存，工作内存</li>
<li>Java中存在内存泄漏问题吗？请举例说明</li>
<li>简述 Java 中软引用（SoftReferenc）、弱引用（WeakReference）和虚引用</li>
<li>内存映射缓存区是什么</li>
</ul>
</li>
<li>jstack，jstat，jmap，jconsole怎么用</li>
<li>32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？32 位和 64 位的 JVM，int 类型变量的长度是多数？</li>
<li>怎样通过 Java 程序来判断 JVM 是 32 位 还是 64 位</li>
<li>JVM自身会维护缓存吗？是不是在堆中进行对象分配，操作系统的堆还是JVM自己管理堆</li>
<li>什么情况下会发生栈内存溢出</li>
<li>双亲委派模型是什么</li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul>
<li>基本概念<ul>
<li>什么是线程</li>
<li>多线程的优点</li>
<li>多线程的几种实现方式<ul>
<li>用 Runnable 还是 Thread</li>
</ul>
</li>
<li>什么是线程安全<ul>
<li>Vector, SimpleDateFormat 是线程安全类吗</li>
<li>什么 Java 原型不是线程安全的</li>
<li>哪些集合类是线程安全的</li>
</ul>
</li>
<li>多线程中的忙循环是什么</li>
<li>如何创建一个线程</li>
<li>编写多线程程序有几种实现方式</li>
<li>什么是线程局部变量</li>
<li>线程和进程有什么区别？进程间如何通讯，线程间如何通讯</li>
<li>什么是多线程环境下的伪共享（false sharing）</li>
<li>同步和异步有何异同，在什么情况下分别使用他们？举例说明</li>
</ul>
</li>
<li>Current<ul>
<li>ConcurrentHashMap 和 Hashtable的区别</li>
<li>ArrayBlockingQueue, CountDownLatch的用法</li>
<li>ConcurrentHashMap的并发度是什么</li>
</ul>
</li>
<li>CyclicBarrier 和 CountDownLatch有什么不同？各自的内部原理和用法是什么</li>
<li>Semaphore的用法</li>
<li>Thread<ul>
<li>启动一个线程是调用 run() 还是 start() 方法？start() 和 run() 方法有什么区别</li>
<li>调用start()方法时会执行run()方法，为什么不能直接调用run()方法</li>
<li>sleep() 方法和对象的 wait() 方法都可以让线程暂停执行，它们有什么区别</li>
<li>yield方法有什么作用？sleep() 方法和 yield() 方法有什么区别</li>
<li>Java 中如何停止一个线程</li>
<li>stop() 和 suspend() 方法为何不推荐使用</li>
<li>如何在两个线程间共享数据</li>
<li>如何强制启动一个线程</li>
<li>如何让正在运行的线程暂停一段时间</li>
<li>什么是线程组，为什么在Java中不推荐使用</li>
<li>你是如何调用  wait（方法的）？使用 if 块还是循环？为什么</li>
</ul>
</li>
<li>生命周期<ul>
<li>有哪些不同的线程生命周期</li>
<li>线程状态，BLOCKED 和 WAITING 有什么区别</li>
<li>画一个线程的生命周期状态图</li>
</ul>
</li>
<li>ThreadLocal 用途是什么，原理是什么，用的时候要注意什么</li>
<li>ThreadPool<ul>
<li>线程池是什么？为什么要使用它</li>
<li>如何创建一个Java线程池<ul>
<li>ThreadPool用法与优势</li>
<li>提交任务时，线程池队列已满时会发会生什么</li>
<li>newCache 和 newFixed 有什么区别？简述原理。构造函数的各个参数的含义是什么，比如 coreSize, maxsize 等</li>
<li>线程池的实现策略</li>
<li>线程池的关闭方式有几种，各自的区别是什么</li>
<li>线程池中submit() 和 execute()方法有什么区别？</li>
</ul>
</li>
</ul>
</li>
<li>线程调度<ul>
<li>Java中用到的线程调度算法是什么</li>
<li>什么是多线程中的上下文切换</li>
<li>你对线程优先级的理解是什么</li>
<li>什么是线程调度器 (Thread Scheduler) 和时间分片 (Time Slicing)</li>
</ul>
</li>
<li>线程同步<ul>
<li>请说出你所知的线程同步的方法</li>
<li>synchronized 的原理是什么</li>
<li>synchronized 和 ReentrantLock 有什么不同</li>
<li>什么场景下可以使用 volatile 替换 synchronized</li>
<li>有T1，T2，T3三个线程，怎么确保它们按顺序执行？怎样保证T2在T1执行完后执行，T3在T2执行完后执行</li>
<li>同步块内的线程抛出异常会发生什么</li>
<li>当一个线程进入一个对象的 synchronized 方法A 之后，其它线程是否可进入此对象的 synchronized 方法B</li>
<li>使用 synchronized 修饰静态方法和非静态方法有什么区别</li>
<li>如何从给定集合那里创建一个 synchronized 的集合</li>
</ul>
</li>
<li>锁<ul>
<li>Java Concurrency API 中 的 Lock 接口是什么？对比同步它有什么优势</li>
<li>Lock 与 Synchronized 的区别？Lock 接口比 synchronized 块的优势是什么</li>
<li>ReadWriteLock是什么？</li>
<li>锁机制有什么用</li>
<li>什么是乐观锁（Optimistic Locking）？如何实现乐观锁？如何避免ABA问题</li>
<li>解释以下名词：重排序，自旋锁，偏向锁，轻量级锁，可重入锁，公平锁，非公平锁，乐观锁，悲观锁</li>
<li>什么时候应该使用可重入锁</li>
<li>简述锁的等级方法锁、对象锁、类锁</li>
<li>Java中活锁和死锁有什么区别？</li>
<li>什么是死锁(Deadlock)？导致线程死锁的原因？如何确保 N 个线程可以访问 N 个资源同时又不导致死锁</li>
<li>死锁与活锁的区别，死锁与饥饿的区别</li>
<li>怎么检测一个线程是否拥有锁</li>
<li>如何实现分布式锁</li>
<li>有哪些无锁数据结构，他们实现的原理是什么</li>
<li>读写锁可以用于什么应用场景</li>
</ul>
</li>
<li>Executors类是什么？ Executor和Executors的区别</li>
<li>什么是Java线程转储(Thread Dump)，如何得到它</li>
<li>如何在Java中获取线程堆栈</li>
<li>说出 3 条在 Java 中使用线程的最佳实践</li>
<li>在线程中你怎么处理不可捕捉异常</li>
<li>实际项目中使用多线程举例。你在多线程环境中遇到的常见的问题是什么？你是怎么解决它的</li>
<li>请说出与线程同步以及线程调度相关的方法</li>
<li>程序中有3个 socket，需要多少个线程来处理</li>
<li>假如有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有 10 个线程同时调用它，如何做到</li>
<li>如何在 Windows 和 Linux 上查找哪个线程使用的 CPU 时间最长</li>
<li>如何确保 main() 方法所在的线程是 Java 程序最后结束的线程</li>
<li>非常多个线程（可能是不同机器），相互之间需要等待协调才能完成某种工作，问怎么设计这种协调方案</li>
<li>你需要实现一个高效的缓存，它允许多个用户读，但只允许一个用户写，以此来保持它的完整性，你会怎样去实现它</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li>基本概念<ul>
<li>Error 和 Exception有什么区别<ul>
<li>UnsupportedOperationException是什么</li>
<li>NullPointerException 和 ArrayIndexOutOfBoundException 之间有什么相同之处</li>
</ul>
</li>
<li>什么是受检查的异常，什么是运行时异常</li>
<li>运行时异常与一般异常有何异同</li>
<li>简述一个你最常见到的runtime exception(运行时异常)</li>
</ul>
</li>
<li>finally<ul>
<li>finally关键词在异常处理中如何使用<ul>
<li>如果执行finally代码块之前方法返回了结果，或者JVM退出了，finally块中的代码还会执行吗</li>
<li>try里有return，finally还执行么？那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后</li>
<li>在什么情况下，finally语句不会执行</li>
</ul>
</li>
</ul>
</li>
<li>throw 和 throws 有什么区别？</li>
<li>OOM你遇到过哪些情况？你是怎么搞定的？</li>
<li>SOF你遇到过哪些情况？</li>
<li>既然我们可以用RuntimeException来处理错误，那么你认为为什么Java中还存在检查型异常</li>
<li>当自己创建异常类的时候应该注意什么</li>
<li>导致空指针异常的原因</li>
<li>异常处理 handle or declare 原则应该如何理解</li>
<li>怎么利用 JUnit 来测试一个方法的异常</li>
<li>catch块里别不写代码有什么问题</li>
<li>你曾经自定义实现过异常吗？怎么写的</li>
<li>什么是 异常链</li>
<li>在try块中可以抛出异常吗</li>
</ul>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ul>
<li>通过 JDBC 连接数据库有哪几种方式</li>
<li>阐述 JDBC 操作数据库的基本步骤</li>
<li>JDBC 中如何进行事务处理</li>
<li>什么是 JdbcTemplate</li>
<li>什么是 DAO 模块</li>
<li>使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能</li>
<li>列出 5 个应该遵循的 JDBC 最佳实践</li>
</ul>
<h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ul>
<li>File<ul>
<li>File类型中定义了什么方法来创建一级目录<ul>
<li>File类型中定义了什么方法来判断一个文件是否存在</li>
</ul>
</li>
</ul>
</li>
<li>流<ul>
<li>为了提高读写性能，可以采用什么流</li>
<li>Java中有几种类型的流</li>
<li>JDK 为每种类型的流提供了一些抽象类以供继承，分别是哪些类</li>
<li>对文本文件操作用什么I/O流</li>
<li>对各种基本数据类型和String类型的读写，采用什么流</li>
<li>能指定字符编码的 I/O 流类型是什么</li>
</ul>
</li>
<li>序列化<ul>
<li>什么是序列化？如何实现 Java 序列化及注意事项</li>
<li>Serializable 与 Externalizable 的区别</li>
</ul>
</li>
<li>Socket<ul>
<li>socket 选项 TCP NO DELAY 是指什么</li>
<li>Socket 工作在 TCP/IP 协议栈是哪一层</li>
<li>TCP、UDP 区别及 Java 实现方式</li>
</ul>
</li>
<li>说几点 IO 的最佳实践</li>
<li>直接缓冲区与非直接缓冲器有什么区别？</li>
<li>怎么读写 ByteBuffer？ByteBuffer 中的字节序是什么</li>
<li>当用System.in.read(buffer)从键盘输入一行n个字符后，存储在缓冲区buffer中的字节数是多少</li>
<li>如何使用扫描器类（Scanner Class）令牌化</li>
</ul>
<h2 id="面向对象编程（OOP）"><a href="#面向对象编程（OOP）" class="headerlink" title="面向对象编程（OOP）"></a>面向对象编程（OOP）</h2><ul>
<li>解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）</li>
<li>多态的实现原理</li>
<li>封装、继承和多态是什么</li>
<li>对象封装的原则是什么?</li>
<li>类<ul>
<li>获得一个类的类对象有哪些方式</li>
<li>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</li>
<li>说出几条 Java 中方法重载的最佳实践</li>
</ul>
</li>
<li>抽象类<ul>
<li>抽象类和接口的区别</li>
<li>抽象类中是否可以有静态的main方法</li>
<li>抽象类是否可实现(implements)接口</li>
<li>抽象类是否可继承具体类(concrete class)</li>
</ul>
</li>
<li>匿名类（Anonymous Inner Class）<ul>
<li>匿名内部类是否可以继承其它类？是否可以实现接口</li>
</ul>
</li>
<li>内部类<ul>
<li>内部类分为几种</li>
<li>内部类可以引用它的包含类（外部类）的成员吗</li>
<li>请说一下 Java 中为什么要引入内部类？还有匿名内部类</li>
</ul>
</li>
<li>继承<ul>
<li>继承（Inheritance）与聚合（Aggregation）的区别在哪里</li>
<li>继承和组合之间有什么不同</li>
<li>为什么类只能单继承，接口可以多继承</li>
<li>存在两个类，B 继承 A，C 继承 B，能将 B 转换为 C 么？如 C = (C) B</li>
<li>如果类 a 继承类 b，实现接口c，而类 b 和接口 c 中定义了同名变量，请问会出现什么问题</li>
</ul>
</li>
<li>接口<ul>
<li>接口是什么</li>
<li>接口是否可继承接口</li>
<li>为什么要使用接口而不是直接使用具体类？接口有什么优点</li>
</ul>
</li>
</ul>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul>
<li>泛型的存在是用来解决什么问题</li>
<li>泛型的常用特点</li>
<li>List<string>能否转为List<object></object></string></li>
</ul>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul>
<li>日历<ul>
<li>Calendar Class的用途</li>
<li>如何在Java中获取日历类的实例</li>
<li>解释一些日历类中的重要方法<ul>
<li>GregorianCalendar 类是什么</li>
<li>SimpleTimeZone 类是什么</li>
<li>Locale类是什么</li>
<li>如何格式化日期对象</li>
<li>如何添加小时(hour)到一个日期对象(Date Objects)</li>
<li>如何将字符串 YYYYMMDD 转换为日期</li>
</ul>
</li>
</ul>
</li>
<li>Math<ul>
<li>Math.round()什么作用？Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</li>
</ul>
</li>
<li>XML<ul>
<li>XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？DOM 和 SAX 解析器有什么不同？</li>
<li>Java解析XML的方式</li>
<li>用 jdom 解析 xml 文件时如何解决中文问题？如何解析</li>
<li>你在项目中用到了 XML 技术的哪些方面？如何实现</li>
</ul>
</li>
</ul>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul>
<li>描述动态代理的几种实现方式，分别说出相应的优缺点</li>
</ul>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul>
<li>什么是设计模式（Design Patterns）？你用过哪种设计模式？用在什么场合</li>
<li>你知道哪些商业级设计模式？</li>
<li>哪些设计模式可以增加系统的可扩展性</li>
<li>单例模式<ul>
<li>除了单例模式，你在生产环境中还用过什么设计模式？</li>
<li>写 Singleton 单例模式</li>
<li>单例模式的双检锁是什么</li>
<li>如何创建线程安全的 Singleton</li>
<li>什么是类的单例模式</li>
<li>写出三种单例模式实现</li>
</ul>
</li>
<li>适配器模式<ul>
<li>适配器模式是什么？什么时候使用</li>
<li>适配器模式和代理模式之前有什么不同</li>
<li>适配器模式和装饰器模式有什么区别</li>
</ul>
</li>
<li>什么时候使用享元模式</li>
<li>什么时候使用组合模式</li>
<li>什么时候使用访问者模式</li>
<li>什么是模板方法模式</li>
<li>请给出1个符合开闭原则的设计模式的例子</li>
</ul>
<h2 id="开放问题"><a href="#开放问题" class="headerlink" title="开放问题"></a>开放问题</h2><ul>
<li>用一句话概括 Web 编程的特点</li>
<li>Google是如何在一秒内把搜索结果返回给用户</li>
<li>哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入</li>
<li>树（二叉或其他）形成许多普通数据结构的基础。请描述一些这样的数据结构以及何时可以使用它们</li>
<li>某一项功能如何设计</li>
<li>线上系统突然变得异常缓慢，你如何查找问题</li>
<li>什么样的项目不适合用框架</li>
<li>新浪微博是如何实现把微博推给订阅者</li>
<li>简要介绍下从浏览器输入 URL 开始到获取到请求界面之后 Java Web 应用中发生了什么</li>
<li>请你谈谈SSH整合</li>
<li>高并发下，如何做到安全的修改同一行数据</li>
<li>12306网站的订票系统如何实现，如何保证不会票不被超卖</li>
<li>网站性能优化如何优化的</li>
<li>聊了下曾经参与设计的服务器架构</li>
<li>请思考一个方案，实现分布式环境下的 countDownLatch</li>
<li>请思考一个方案，设计一个可以控制缓存总体大小的自动适应的本地缓存</li>
<li>在你的职业生涯中，算得上最困难的技术挑战是什么</li>
<li>如何写一篇设计文档，目录是什么</li>
<li>大写的O是什么？举几个例子</li>
<li>编程中自己都怎么考虑一些设计原则的，比如开闭原则，以及在工作中的应用</li>
<li>解释一下网络应用的模式及其特点</li>
<li>设计一个在线文档系统，文档可以被编辑，如何防止多人同时对同一份文档进行编辑更新</li>
<li>说出数据连接池的工作机制是什么</li>
<li>怎么获取一个文件中单词出现的最高频率</li>
<li>描述一下你最常用的编程风格</li>
<li>如果有机会重新设计你们的产品，你会怎么做</li>
<li>如何搭建一个高可用系统</li>
<li>如何启动时不需输入用户名与密码</li>
<li>如何在基于Java的Web项目中实现文件上传和下载</li>
<li>如何实现一个秒杀系统，保证只有几位用户能买到某件商品。</li>
<li>如何实现负载均衡，有哪些算法可以实现</li>
<li>如何设计一个购物车？想想淘宝的购物车如何实现的</li>
<li>如何设计一套高并发支付方案，架构如何设计</li>
<li>如何设计建立和保持 100w 的长连接</li>
<li>如何避免浏览器缓存。</li>
<li>如何防止缓存雪崩</li>
<li>如果AB两个系统互相依赖，如何解除依</li>
<li>如果有人恶意创建非法连接，怎么解决</li>
<li>如果有几十亿的白名单，每天白天需要高并发查询，晚上需要更新一次，如何设计这个功能</li>
<li>如果系统要使用超大整数（超过long长度范围），请你设计一个数据结构来存储这种超大型数字以及设计一种算法来实现超大整数加法运算）</li>
<li>如果要设计一个图形系统，请你设计基本的图形元件(Point,Line,Rectangle,Triangle)的简单实现</li>
<li>如果让你实现一个并发安全的链表，你会怎么做</li>
<li>应用服务器与WEB 服务器的区别？应用服务器怎么监控性能，各种方式的区别？你使用过的应用服务器优化技术有哪些</li>
<li>大型网站在架构上应当考虑哪些问题</li>
<li>有没有处理过线上问题？出现内存泄露，CPU利用率标高，应用无响应时如何处理的</li>
<li>最近看什么书，印象最深刻的是什么</li>
<li>描述下常用的重构技巧</li>
<li>你使用什么版本管理工具？分支（Branch）与标签（Tag）之间的区别在哪里</li>
<li>你有了解过存在哪些反模式（Anti-Patterns）吗</li>
<li>你用过的网站前端优化的技术有哪些</li>
<li>如何分析Thread dump</li>
<li>你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念</li>
<li>你是如何处理内存泄露或者栈溢出问题的</li>
<li>你们线上应用的 JVM 参数有哪些</li>
<li>怎么提升系统的QPS和吞吐量</li>
</ul>
<h2 id="知识面"><a href="#知识面" class="headerlink" title="知识面"></a>知识面</h2><ul>
<li>解释什么是 MESI 协议(缓存一致性)</li>
<li>谈谈 reactor 模型</li>
<li>Java 9 带来了怎样的新功能</li>
<li>Java 与 C++ 对比，C++ 或 Java 中的异常处理机制的简单原理和应用</li>
<li>简单讲讲 Tomcat 结构，以及其类加载器流程</li>
<li>虚拟内存是什么</li>
<li>阐述下 SOLID 原则</li>
<li>请简要讲一下你对测试驱动开发（TDD）的认识</li>
<li>CDN实现原理</li>
<li>Maven 和 ANT 有什么区别</li>
<li>UML中有哪些常用的图</li>
<li>Linux<ul>
<li>Linux 下 IO 模型有几种，各自的含义是什么。</li>
<li>Linux 系统下你关注过哪些内核参数，说说你知道的</li>
<li>Linux 下用一行命令查看文件的最后五行</li>
<li>平时用到哪些 Linux 命令</li>
<li>用一行命令输出正在运行的 Java 进程</li>
<li>使用什么命令来确定是否有 Tomcat 实例运行在机器上</li>
</ul>
</li>
<li>什么是 N+1 难题</li>
<li>什么是 paxos 算法</li>
<li>什么是 restful，讲讲你理解的 restful</li>
<li>什么是 zab 协议</li>
<li>什么是领域模型(domain model)？贫血模型(anaemic domain model) 和充血模型(rich domain model)有什么区别</li>
<li>什么是领域驱动开发（Domain Driven Development）</li>
<li>介绍一下了解的 Java 领域的 Web Service 框架</li>
<li>Web Server、Web Container 与 Application Server 的区别是什么</li>
<li>微服务（MicroServices）与巨石型应用（Monolithic Applications）之间的区别在哪里</li>
<li>描述 Cookie 和 Session 的作用，区别和各自的应用范围，Session工作原理</li>
<li>你常用的持续集成（Continuous Integration）、静态代码分析（Static Code Analysis）工具有哪些</li>
<li>简述下数据库正则化（Normalizations）</li>
<li>KISS,DRY,YAGNI 等原则是什么含义</li>
<li>分布式事务的原理，优缺点，如何使用分布式事务？</li>
<li>布式集群下如何做到唯一序列号</li>
<li>网络<ul>
<li>HTTPS 的加密方式是什么，讲讲整个加密解密流程</li>
<li>HTTPS和HTTP的区别</li>
<li>HTTP连接池实现原理</li>
<li>HTTP集群方案</li>
<li>Nginx、lighttpd、Apache三大主流 Web服务器的区别</li>
</ul>
</li>
<li>是否看过框架的一些代码</li>
<li>持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些</li>
<li>数值提升是什么</li>
<li>你能解释一下里氏替换原则吗</li>
<li>你是如何测试一个应用的？知道哪些测试框架</li>
<li>传输层常见编程协议有哪些？并说出各自的特点</li>
</ul>
<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="计算加班费"><a href="#计算加班费" class="headerlink" title="计算加班费"></a>计算加班费</h3><p>加班10小时以下加班费是时薪的1.5倍。加班10小时或以上，按4元/时算。提示：（一个月工作26天，一天正常工作8小时）</p>
<ul>
<li>计算1000月薪，加班9小时的加班费</li>
<li>计算2500月薪，加班11小时的加班费</li>
<li>计算1000月薪，加班15小时的加班费</li>
</ul>
<h3 id="卖东西"><a href="#卖东西" class="headerlink" title="卖东西"></a>卖东西</h3><p>一家商场有红苹果和青苹果出售。（红苹果5元/个，青苹果4元/个）。</p>
<ul>
<li>模拟一个进货。红苹果跟青苹果各进200个。</li>
<li>模拟一个出售。红苹果跟青苹果各买出10个。每卖出一个苹果需要进行统计。</li>
</ul>
<p>提示：一个苹果是一个单独的实体。</p>
<h3 id="日期提取"><a href="#日期提取" class="headerlink" title="日期提取"></a>日期提取</h3><p>有这样一个时间字符串：2008-8-8 20:08:08 ， 请编写能够匹配它的正则表达式，并编写Java代码将日期后面的时分秒提取出来，即：20:08:08</p>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul>
<li>8设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序。</li>
<li>用Java写一个多线程程序，如写四个线程，二个加1，二个对一个变量减一，输出</li>
<li>wait-notify 写一段代码来解决生产者-消费者问题</li>
</ul>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul>
<li>判断101-200之间有多少个素数，并输出所有素数</li>
<li>用最有效率的方法算出2乘以17等于多少</li>
<li>有 1 亿个数字，其中有 2 个是重复的，快速找到它，时间和空间要最优</li>
<li>2 亿个随机生成的无序整数,找出中间大小的值</li>
<li>10 亿个数字里里面找最小的 10 个</li>
<li>1到1亿的自然数，求所有数的拆分后的数字之和，如286 拆分成2、8、6，如1到11拆分后的数字之和 =&gt; 1 + … + 9 + 1 + 0 + 1 + 1</li>
<li>一个数如果恰好等于它的因子之和，这个数就称为 “完数 “。例如6=1＋2＋3.编程   找出1000以内的所有完数</li>
<li>一个数组中所有的元素都出现了三次，只有一个元素出现了一次找到这个元素</li>
<li>一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在   第10次落地时，共经过多少米？第10次反弹多高？</li>
<li>求100－1000内质数的和</li>
<li>求1到100的和的平均数</li>
<li>求s=a+a+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。 求出1到100的和</li>
<li>算出1到40的质数，放进数组里<ul>
<li>显示放组里的数</li>
<li>找出第[5]个数</li>
<li>删除第[9]个数，再显示删除后的第[9]个</li>
</ul>
</li>
<li>有 3n+1 个数字，其中 3n 个中是重复的，只有 1 个是不重复的，怎么找出来。</li>
<li>有一组数1.1.2.3.5.8.13.21.34。写出程序随便输入一个数就能给出和前一组数字同规律的头5个数</li>
<li>计算指定数字的阶乘</li>
<li>开发 Fizz Buzz</li>
<li>给定一个包含 N 个整数的数组，找出丢失的整数</li>
<li>一个排好序的数组，找出两数之和为m的所有组合</li>
<li>将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。</li>
<li>打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方</li>
<li>原地交换两个变量的值</li>
<li>找出4字节整数的中位数</li>
<li>找到整数的平方根</li>
<li>实现斐波那契</li>
</ul>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul>
<li>用Java Socket编程，读服务器几个字符，再写入本地显示</li>
</ul>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul>
<li>反射机制提供了什么功能？</li>
<li>反射是如何实现的</li>
<li>哪里用到反射机制</li>
<li>反射中 Class.forName 和 ClassLoader 区别</li>
<li>反射创建类实例的三种方式是什么</li>
<li>如何通过反射调用对象的方法</li>
<li>如何通过反射获取和设置对象私有字段的值</li>
<li>反射机制的优缺点</li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>写一段 JDBC 连Oracle的程序,并实现数据查询</li>
</ul>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul>
<li>50个人围坐一圈，当数到三或者三的倍数出圈，问剩下的人是谁，原来的位置是多少</li>
<li>实现一个电梯模拟器用</li>
<li>写一个冒泡排序</li>
<li>写一个折半查找</li>
<li>随机产生20个不能重复的字符并排序</li>
<li>写一个函数，传入 2 个有序的整数数组，返回一个有序的整数数组</li>
<li>写一段代码在遍历 ArrayList 时移除一个元素</li>
<li>古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少</li>
<li>约瑟芬环游戏</li>
</ul>
<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><ul>
<li>请编写一段匹配IP地址的正则表达式</li>
<li>写出一个正则表达式来判断一个字符串是否是一个数字</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>写一个方法，入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。</li>
<li>写一个程序找出所有字符串的组合，并检查它们是否是回文串</li>
<li>写一个字符串反转函数，输入abcde转换成edcba代码</li>
<li>小游戏，倒转句子中的单词</li>
<li>将GB2312编码的字符串转换为ISO-8859-1编码的字符串</li>
<li>请写一段代码来计算给定文本内字符“A”的个数。分别用迭代和递归两种方式</li>
<li>编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串。 但是要保证汉字不被截半个，如“我ABC”4，应该截为“我AB”，输入“我ABC汉DEF”，6，应该输出为“我ABC”而不是“我ABC+汉的半个”</li>
<li>给定 2 个包含单词列表（每行一个）的文件，编程列出交集</li>
<li>打印出一个字符串的所有排列</li>
<li>将一个键盘输入的数字转化成中文输出(例如：输入1234567，输出:一百二拾三万四千五百六拾七)</li>
<li>在Web应用开发过程中经常遇到输出某种编码的字符，如从 GBK 到 ISO8859-1等，如何输出一个某种编码的字符串</li>
</ul>
<h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><ul>
<li>计算两个日期之间的差距</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java面试资源&quot;&gt;&lt;a href=&quot;#Java面试资源&quot; class=&quot;headerlink&quot; title=&quot;Java面试资源&quot;&gt;&lt;/a&gt;Java面试资源&lt;/h1&gt;&lt;p&gt;这里汇总整理了网络上的Java面试题，持续更新&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高并发服务设计——缓存</title>
    <link href="http://jasonlife.top/2017/10/12/25%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E7%BC%93%E5%AD%98/"/>
    <id>http://jasonlife.top/2017/10/12/25高并发服务设计——缓存/</id>
    <published>2017-10-12T08:15:50.000Z</published>
    <updated>2018-01-16T03:35:05.957Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>缓存回收策略<br>1.1 基于空间<br>即设置缓存的存储空间，如设置为10MB，当达到存储空间时，按照一定的策略移除数据。<br>1.2 基于容量<br>基于容量指缓存设置了最大大小，当缓存的条目超过最大大小，则按照一定的策略将旧数据移除。<a id="more"></a>
1.3 基于时间<br>TTL(Time To Live)：存活期，即缓存数据从缓存中创建时间开始直到它到期的一个时间段(不管在这个时间段内有没有访问都将过期)。<br>TTI(Time To Idle)：空闲期，即缓存数据多久没被访问过将从缓存中移除的时间。<br>1.4 基于Java对象引用<br>软引用：如果一个对象是软引用，那么当JVM堆内存不足时，垃圾回收器可以回收这些对象。软引用适合用来做缓存，从而当JVM堆内存不足时，可以回收这些对象腾出一些空间供强引用对象使用，从而避免OOM。<br>弱引用：当垃圾回收器回收内存时，如果发现弱引用，则将立即回收它。相对于软引用有更短的生命周期。<br>注意：弱引用/软引用对象只有当没有其他强引用对象引用它时，垃圾回收时才回收该引用。 即如果有一个对象(不是弱引用/软引用)引用了弱引用/软引用对象，那么垃圾回收是不会回收该引用对象。<br>1.5 回收算法<br>使用基于空间和基于容量的缓存会使用一定的策略移除旧数据，常见的如下：<br>FIFO(Fisrt In Fisrt Out)：先进先出算法，即先进入缓存的先被移除。<br>LRU(Least Recently Used)：最近最少使用算法，使用时间距离现在最久的数据被移除。<br>LFU(Least Frequently Used)：最不常用算法，一定时间段内使用次数（频率）最少的数据被移除。<br>实际应用中基于LRU的缓存较多，如Guava Cache、EhCache支持LRU。</li>
<li>Java缓存类型<br>2.1 堆缓存<br>使用Java堆内存来存储对象。可以使用Guava Cache、Ehcache 3.x、MapDB实现。<br>优点：使用堆缓存的好处是没有序列化/反序列化，是最快的缓存；<br>缺点：很明显，当缓存的数据量很大时， GC暂停时间会变长，存储容量受限于堆空间大小；一般通过软引用/弱引用来存储缓存对象，即当堆内存不足时，可以强制回收这部分内存释放堆内存空间。一般使用堆缓存存储较热的数据。<br>2.2 堆外缓存<br>即缓存数据存储在堆外内存。可以使用Ehcache 3.x、MapDB实现。<br>优点：可以减少GC暂停时间(堆对象转移到堆外，GC扫描和移动的对象变少了)，可以支持更大的缓存空间(只受机器内存大小限制，不受堆空间的影响)。<br>缺点：读取数据时需要序列化/反序列化，会比堆缓存慢很多。<br>2.3 磁盘缓存<br>即缓存数据的存储在磁盘上。当JVM重启时数据还是在的。而堆缓存/堆外缓存重启时数据会丢失，需要重新加载。可以使用Ehcache 3.x、MapDB实现。<br>2.4 分布式缓存<br>在多JVM实例的情况时，进程内缓存和磁盘缓存会存在两个问题：1.单机容量问题; 2.数据一致性问题（既然数据允许缓存，则表示允许一定时间内的不一致，因此可以设置缓存数据的过期时间来定期更新数据）; 3.缓存不命中时，需要回源到DB/服务查询变多：每个实例在缓存不命中情况下都会回源到DB加载数据，因此，多实例后DB整体的访问量就变多了。解决办法可以使用如一致性哈希分片算法来解决。因此，这些情况可以考虑使用分布式缓存来解决。可以使用ehcache-clustered(配合Terracotta server)实现Java进程间分布式缓存。当然也可以使用如Redis实现分布式缓存。<br>两种模式如下：<br>单机时：存储最热的数据到堆缓存，相对热的数据到堆外缓存，不热的数据存到磁盘缓存。<br>集群时：存储最热的数据到堆缓存，相对热的数据到堆外缓存，全量数据存到分布式缓存。</li>
<li>Java缓存实现<br>3.1 堆缓存<br>3.1.1 Guava Cache实现<br>Guava Cache只提供堆缓存，小巧灵活，性能最好，如果只使用堆缓存，那么使用它就够了。<br>Cache<string, string=""> myCache=<pre><code>CacheBuilder.newBuilder()
.concurrencyLevel(4)
.expireAfterWrite(10, TimeUnit.SECONDS)
.maximumSize(10000)
.build();
</code></pre>然后可以通过put、getIfPresent 来读写缓存。CacheBuilder有几类参数：缓存回收策略、并发设置等。<br>3.1.1.1 缓存回收策略/基于容量<br>maximumSize：设置缓存的容量，当超出maximumSize时，按照LRU进行缓存回收。<br>3.1.1.2 缓存回收策略/基于时间<br>expireAfterWrite：设置TTL，缓存数据在给定的时间内没有写(创建/覆盖)时，则被回收，即定期的会回收缓存数据。<br>expireAfterAccess：设置TTI，缓存数据在给定的时间内没有读/写时，则被回收。每次访问时，都会更新它的TTI，从而如果该缓存是非常热的数据，则将一直不过期，可能会导致脏数据存在很长时间(因此，建议设置expireAfterWrite)。<br>3.1.1.3 缓存回收策略/基于Java对象引用<br>weakKeys/weakValues：设置弱引用缓存。<br>softValues：设置软引用缓存。<br>3.1.1.4 缓存回收策略/主动失效<br>invalidate(Object key)/invalidateAll(Iterablekeys)/invalidateAll()：主动失效某些缓存数据。<br>什么时候触发失效呢? Guava Cache不会在缓存数据失效时立即触发回收操作(如果要这么做，则需要有额外的线程来进行清理)，是在PUT时会主动进行一次清理缓存，当然读者也可以根据实际业务通过自己设计线程来调用cleanUp方法进行清理。<br>3.1.1.5 并发级别<br>concurrencyLevel：Guava Cache重写了ConcurrentHashMap，concurrencyLevel用来设置Segment数量，concurrencyLevel越大并发能力越强。<br>3.1.1.6 统计命中率<br>recordStats：启动记录统计信息，比如命中率等<br>3.1.2 EhCache 3.x实现<br>CacheManager cacheManager = CacheManagerBuilder. newCacheManagerBuilder(). build(true);<br>CacheConfigurationBuilder<string, string=""> cacheConfig= CacheConfigurationBuilder.newCacheConfigurationBuilder(<pre><code>String.class,
String.class,
ResourcePoolsBuilder.newResourcePoolsBuilder()
        .heap(100, EntryUnit.ENTRIES))
.withDispatcherConcurrency(4)
.withExpiry(Expirations.timeToLiveExpiration(Duration.of(10,TimeUnit.SECONDS)));
</code></pre>Cache<string, string=""> myCache = cacheManager.createCache(“myCache”,cacheConfig);<br>CacheManager在JVM关闭时请调用CacheManager.close()方法。 可以通过PUT、GET来读写缓存。CacheConfigurationBuilder也有几类参数：缓存回收策略、并发设置、统计命中率等。<br>3.1.2.1 缓存回收策略/基于容量<br>heap(100, EntryUnit.ENTRIES)：设置缓存的条目数量，当超出此数量时按照LRU进行缓存回收。<br>3.1.2.2 缓存回收策略/基于空间<br>heap(100, MemoryUnit.MB)：设置缓存的内存空间，当超出此空间时按照LRU进行缓存回收。另外，应该设置withSizeOfMaxObjectGraph(2)：统计对象大小时对象图遍历深度和withSizeOfMaxObjectSize(1, MemoryUnit.KB)：可缓存的最大对象大小。<br>3.1.2.3 缓存回收策略/基于时间<br>withExpiry(Expirations.timeToLiveExpiration(Duration.of(10,TimeUnit.SECONDS)))：设置TTL，没有TTI。<br>withExpiry(Expirations.timeToIdleExpiration(Duration.of(10,TimeUnit.SECONDS)))：同时设置TTL和TTI，且TTL和TTI值一样。<br>3.1.2.4 缓存回收策略/主动失效<br>remove(K key)/ removeAll(Set keys)/clear()：主动失效某些缓存数据。<br>什么时候触发失效呢?EhCache使用了类似于Guava Cache同样的机制。<br>3.1.2.5 并发级别<br>目前还没有提供API来设置，EhCache内部使用ConcurrentHashMap作为缓存存储，默认并发级别16。withDispatcherConcurrency是用来设置事件分发时的并发级别。<br>3.1.3 MapDB 3.x 实现<br>HTreeMap myCache =<pre><code>DBMaker.heapDB().concurrencyScale(16).make().hashMap(&quot;myCache&quot;)
.expireMaxSize(10000)
.expireAfterCreate(10, TimeUnit.SECONDS)
.expireAfterUpdate(10,TimeUnit.SECONDS)
.expireAfterGet(10, TimeUnit.SECONDS)
.create();
</code></pre>然后可以通过PUT、GET来读写缓存。其有几类参数：缓存回收策略、并发设置、统计命中率等。<br>3.1.3.1 缓存回收策略/基于容量<br>expireMaxSize：设置缓存的容量，当超出expireMaxSize时，按照LRU进行缓存回收。<br>3.1.3.2 缓存回收策略/基于时间<br>expireAfterCreate/expireAfterUpdate：设置TTL，缓存数据在给定的时间内没有写(创建/覆盖)时，则被回收。即定期的会回收缓存数据。<br>expireAfterGet：设置TTI， 缓存数据在给定的时间内没有读/写时，则被回收。每次访问时都会更新它的TTI，从而如果该缓存是非常热的数据，则将一直不过期，可能会导致脏数据存在很长的时间(因此，建议要设置expireAfterCreate/expireAfterUpdate)。<br>3.1.3.3 缓存回收策略/主动失效<br>remove(Object key) /clear()：主动失效某些缓存数据。<br>什么时候触发失效呢?<br>MapDB默认使用类似于Guava Cache的机制。不过，也支持可以通过如下配置使用线程池定期进行缓存失效。<br>expireExecutor(scheduledExecutorService)<br>expireExecutorPeriod(3000)</string,></string,></string,></li>
</ol>
<p>3.1.3.4 并发级别</p>
<p>concurrencyScale：类似于Guava Cache配置。</p>
<p>还可以使用DBMaker.memoryDB()创建堆缓存，它将数据序列化并存储到1MB大小的byte[]数组中，从而减少垃圾回收的影响。</p>
<p>3.2 堆外缓存</p>
<p>3.2.1 EhCache 3.x实现</p>
<p>CacheConfigurationBuilder<string, string=""> cacheConfig= CacheConfigurationBuilder.newCacheConfigurationBuilder(<br>       String.class,<br>       String.class,<br>       ResourcePoolsBuilder.newResourcePoolsBuilder()<br>               .offheap(100, MemoryUnit.MB))<br>       .withDispatcherConcurrency(4)<br>       .withExpiry(Expirations.timeToLiveExpiration(Duration.of(10,TimeUnit.SECONDS)))<br>       .withSizeOfMaxObjectGraph(3)<br>       .withSizeOfMaxObjectSize(1, MemoryUnit.KB);</string,></p>
<p>堆外缓存不支持基于容量的缓存过期策略。</p>
<p>3.2.2 MapDB 3.x实现</p>
<p>HTreeMap myCache =<br>       DBMaker.memoryDirectDB().concurrencyScale(16).make().hashMap(“myCache”)<br>       .expireStoreSize(64 <em> 1024 </em> 1024) //指定堆外缓存大小64MB<br>       .expireMaxSize(10000)<br>       .expireAfterCreate(10, TimeUnit.SECONDS)<br>       .expireAfterUpdate(10, TimeUnit.SECONDS)<br>       .expireAfterGet(10, TimeUnit.SECONDS)<br>       .create();</p>
<p>在使用堆外缓存时，请记得添加JVM启动参数，如-XX:MaxDirectMemorySize=10G。</p>
<p>3.3 磁盘缓存</p>
<p>3.3.1 EhCache 3.x实现</p>
<p>CacheManager cacheManager = CacheManagerBuilder. newCacheManagerBuilder()<br>        //默认线程池<br>        .using(PooledExecutionServiceConfigurationBuilder.newPooledExecutionServiceConfigurationBuilder().defaultPool(“default”,1, 10).build())<br>        //磁盘文件存储位置<br>        .with(new CacheManagerPersistenceConfiguration(newFile(“D:\bak”)))<br>        .build(true);</p>
<p>CacheConfigurationBuilder<string, string=""> cacheConfig= CacheConfigurationBuilder. newCacheConfigurationBuilder(<br>       String.class,<br>       String.class,<br>       ResourcePoolsBuilder.newResourcePoolsBuilder()<br>       .disk(100, MemoryUnit.MB,true))       //磁盘缓存<br>       .withDiskStoreThreadPool(“default”, 5) //使用”default”线程池进行dump文件到磁盘<br>       .withExpiry(Expirations.timeToLiveExpiration(Duration.of(50,TimeUnit.SECONDS)))<br>       .withSizeOfMaxObjectGraph(3)<br>       .withSizeOfMaxObjectSize(1, MemoryUnit.KB);</string,></p>
<p>在JVM停止时，记得调用cacheManager.close()，从而保证内存数据能dump到磁盘。<br>3.3.2 MapDB 3.x实现</p>
<p>DB db = DBMaker<br>        .fileDB(“D:\bak\a.data”)//数据存哪里<br>        .fileMmapEnable() //启用mmap<br>        .fileMmapEnableIfSupported() //在支持的平台上启用mmap<br>        .fileMmapPreclearDisable() //让mmap文件更快<br>        .cleanerHackEnable() //一些BUG处理<br>        .transactionEnable() //启用事务<br>        .closeOnJvmShutdown()<br>        .concurrencyScale(16)<br>        .make();</p>
<p>HTreeMap myCache = db.hashMap(“myCache”)<br>       .expireMaxSize(10000)<br>       .expireAfterCreate(10, TimeUnit.SECONDS)<br>       .expireAfterUpdate(10, TimeUnit.SECONDS)<br>       .expireAfterGet(10, TimeUnit.SECONDS)<br>       .createOrOpen();</p>
<p>因为开启了事务，MapDB则开启了WAL。另外，操作完缓存后记得调用db.commit方法提交事务。</p>
<p>myCache.put(“key” + counterWriter,”value” + counterWriter);<br>db.commit();</p>
<p>3.4 分布式缓存</p>
<p>3.4.1 Ehcache 3.1 + Terracotta Server</p>
<p>不建议使用。</p>
<p>3.4.2 Redis</p>
<p>性能非常好，有主从模式、集群模式。</p>
<p>3.5 多级缓存</p>
<p>如先查找堆缓存，如果没有查找磁盘缓存，则使用MapDB可以通过如下配置实现。</p>
<p>HTreeMap diskCache = db.hashMap(“myCache”)<br>       .expireStoreSize(8 <em> 1024 </em> 1024 * 1024)<br>       .expireMaxSize(10000)<br>       .expireAfterCreate(10, TimeUnit.SECONDS)<br>       .expireAfterUpdate(10, TimeUnit.SECONDS)<br>       .expireAfterGet(10, TimeUnit.SECONDS)<br>       .createOrOpen();</p>
<p>HTreeMap heapCache = db.hashMap(“myCache”)<br>       .expireMaxSize(100)<br>       .expireAfterCreate(10, TimeUnit.SECONDS)<br>       .expireAfterUpdate(10, TimeUnit.SECONDS)<br>       .expireAfterGet(10, TimeUnit.SECONDS)<br>       .expireOverflow(diskCache) //当缓存溢出时存储到disk<br>       .createOrOpen();</p>
<ol>
<li>缓存使用模式</li>
</ol>
<p>主要分两大类：Cache-Aside和Cache-As-SoR(Read-through、Write-through、Write-behind)</p>
<p>SoR(system-of-record)：记录系统，或者可以叫做数据源，即实际存储原始数据的系统。<br>Cache：缓存，是SoR的快照数据，Cache的访问速度比SoR要快，放入Cache的目的是提升访问速度，减少回源到SoR的次数。<br>回源：即回到数据源头获取数据，Cache没有命中时，需要从SoR读取数据，这叫做回源。</p>
<p>4.1 Cache-Aside</p>
<p>Cache-Aside 即业务代码围绕着Cache写，是由业务代码直接维护缓存，示例代码如下所示。</p>
<p>4.1.1 读场景</p>
<p>先从缓存获取数据，如果没有命中，则回源到SoR并将源数据放入缓存供下次读取使用。</p>
<p>//1、先从缓存中获取数据<br>value = myCache.getIfPresent(key);<br>if(value == null) {<br>    //2.1、如果缓存没有命中，则回源到SoR获取源数据<br>    value = loadFromSoR(key);<br>    //2.2、将数据放入缓存，下次即可从缓存中获取数据<br>    myCache.put(key, value);<br>}</p>
<p>4.1.2 写场景</p>
<p>先将数据写入SoR，写入成功后立即将数据同步写入缓存。</p>
<p>//1、先将数据写入SoR<br>writeToSoR(key,value);<br>//2、执行成功后立即同步写入缓存<br>myCache.put(key, value);</p>
<p>或者先将数据写入SoR，写入成功后将缓存数据过期，下次读取时再加载缓存。</p>
<p>//1、先将数据写入SoR<br>writeToSoR(key,value);<br>//2、失效缓存，然后下次读时再加载缓存<br>myCache.invalidate(key);</p>
<p>Cache-Aside适合使用AOP模式去实现</p>
<p>4.2 Cache-As-SoR</p>
<p>Cache-As-SoR即把Cache看作为SoR，所有操作都是对Cache进行，然后Cache再委托给SoR进行真实的读/写。即业务代码中只看到Cache的操作，看不到关于SoR相关的代码。有三种实现：read-through、write-through、write-behind。</p>
<p>4.2.1 Read-Through</p>
<p>Read-Through，业务代码首先调用Cache，如果Cache不命中由Cache回源到SoR，而不是业务代码(即由Cache读SoR)。使用Read-Through模式，需要配置一个CacheLoader组件用来回源到SoR加载源数据。Guava Cache和Ehcache 3.x都支持该模式。</p>
<p>4.2.1.1 Guava Cache实现</p>
<p>LoadingCache<integer,result<category>&gt; getCache =<br>       CacheBuilder.newBuilder()<br>       .softValues()<br>       .maximumSize(5000).expireAfterWrite(2, TimeUnit.MINUTES)<br>        .build(new CacheLoader<integer,result<category>&gt;() {<br>           @Override<br>           public Result<category> load(final Integer sortId) throwsException {<br>                return categoryService.get(sortId);<br>           }<br>       });</category></integer,result<category></integer,result<category></p>
<p>在build Cache时，传入一个CacheLoader用来加载缓存，操作流程如下：</p>
<p>应用业务代码直接调用getCache.get(sortId)。<br>首先查询Cache，如果缓存中有，则直接返回缓存数据。<br>如果缓存没有命中，则委托给CacheLoader，CacheLoader会回源到SoR查询源数据(返回值必须不为null，可以包装为Null对象)，然后写入缓存。</p>
<p>使用CacheLoader后有几个好处：</p>
<p>应用业务代码更简洁了，不需要像Cache-Aside模式那样缓存查询代码和SoR代码交织在一起。如果缓存使用逻辑散落在多处，则使用这种方式很简单的消除了重复代码。<br>解决Dog-pile effect，即当某个缓存失效时，又有大量相同的请求没命中缓存，从而同时请求到后端，导致后端压力太大，此时限制一个请求去拿即可。</p>
<p>4.2.1.2 Ehcache 3.x实现</p>
<p>CacheManager cacheManager = CacheManagerBuilder. newCacheManagerBuilder(). build(true);<br>org.ehcache.Cache<string, string=""> myCache =cacheManager. createCache (“myCache”,<br>       CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class,String.class,<br>               ResourcePoolsBuilder.newResourcePoolsBuilder().heap(100,MemoryUnit.MB))<br>               .withDispatcherConcurrency(4)<br>               .withExpiry(Expirations.timeToLiveExpiration(Duration.of(10,TimeUnit.SECONDS)))<br>                .withLoaderWriter(newDefaultCacheLoaderWriter<string, string=""> () {<br>                   @Override<br>                   public String load(String key) throws Exception {<br>                        return readDB(key);<br>                   }<br>                    @Override<br>                   public Map<string, string=""> loadAll(Iterable&lt;? extendsString&gt; keys) throws BulkCacheLoadingException, Exception {<br>                        return null;<br>                   }<br>               }));</string,></string,></string,></p>
<p>Ehcache 3.1没有自己去解决Dog-pile effect。</p>
<p>4.2.2 Write-Through</p>
<p>Write-Through，称之为穿透写模式/直写模式，业务代码首先调用Cache写(新增/修改)数据，然后由Cache负责写缓存和写SoR，而不是业务代码。</p>
<p>使用Write-Through模式需要配置一个CacheWriter组件用来回写SoR。Guava Cache没有提供支持。Ehcache 3.x支持该模式。</p>
<p>Ehcache需要配置一个CacheLoaderWriter，CacheLoaderWriter知道如何去写SoR。当Cache需要写(新增/修改)数据时，首先调用CacheLoaderWriter来同步(立即)到SoR，成功后会更新缓存。</p>
<p>CacheManager cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);<br>Cache<string, string=""> myCache =cacheManager.createCache (“myCache”,<br>       CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class,String.class,<br>               ResourcePoolsBuilder.newResourcePoolsBuilder().heap(100,MemoryUnit.MB))<br>               .withDispatcherConcurrency(4)<br>               .withExpiry(Expirations.timeToLiveExpiration(Duration.of(10,TimeUnit.SECONDS)))<br>               .withLoaderWriter(newDefaultCacheLoaderWriter<string, string=""> () {<br>                   @Override<br>                   public void write(String key, String value) throws Exception{<br>                        //write<br>                   }<br>                   @Override<br>                   public void writeAll(Iterable&lt;? extends Map.Entry&lt;? extendsString, ? extends String&gt;&gt; entries) throws BulkCacheWritingException,Exception {<br>                        for(Object entry: entries) {<br>                            //batch write<br>                        }<br>                   }<br>                   @Override<br>                    public void delete(Stringkey) throws Exception {<br>                        //delete<br>                   }<br>                   @Override<br>                   public void deleteAll(Iterable&lt;? extends String&gt;keys) throws BulkCacheWritingException, Exception {<br>                        for(Object key :keys) {<br>                            //batch delete<br>                        }<br>                   }<br>               }).build());</string,></string,></p>
<p>Ehcache 3.x还是使用CacheLoaderWriter来实现，通过write(String key, String value)、writeAll(Iterable&gt; entries)和delete(String key)、deleteAll(Iterable keys)分别来支持单个写、批量写和单个删除、批量删除操作。</p>
<p>操作流程如下：当我们调用myCache.put(“e”,”123”)或者myCache.putAll(map)时，写缓存。首先，Cache会将写操作立即委托给CacheLoaderWriter#write和#writeAll，然后由CacheLoaderWriter负责立即去写SoR。当写SoR成功后，再写入Cache。</p>
<p>4.2.3 Write-Behind</p>
<p>Write-Behind，也叫Write-Back，称之为回写模式，不同于Write-Through是同步写SoR和Cache，Write-Behind是异步写。异步之后可以实现批量写、合并写、延时和限流。</p>
<p>4.2.3.1 异步写</p>
<p>略，可用EhCache实现</p>
<p>4.2.3.2 批量写</p>
<p>略，可用EhCache实现</p>
<p>4.2.4 Copy Pattern</p>
<p>有两种Copy Pattern， Copy-On-Read和Copy-On-Write。在Guava-Cache和EhCache中堆缓存都是基于引用的，这样如果哟人拿到缓存数据并修改了它，则可能发生不可预测的问题。Guava Cache没有提供支持，EhCache 3.x提供了支持。</p>
<p>public interface Copier<t> {<br>    T copyForRead(T obj);    //Copy-On-Read，比如myCache.get()<br>    T copyForWrite(T obj);   //Copy-On-Write，比如myCache.put()<br>}<br>参考来源：  [1] 亿级流量网站架构核心技术.张开涛著<br>出处：<a href="http://blog.csdn.net/foreverling/article/details/78012205" target="_blank" rel="external">http://blog.csdn.net/foreverling/article/details/78012205</a><br>版权申明：内容来源网络，版权归原创者所有。除非无法确认，我们都会标明作者及出处，如有侵权烦请告知，我们会立即删除并表示歉意。谢谢。</t></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;缓存回收策略&lt;br&gt;1.1 基于空间&lt;br&gt;即设置缓存的存储空间，如设置为10MB，当达到存储空间时，按照一定的策略移除数据。&lt;br&gt;1.2 基于容量&lt;br&gt;基于容量指缓存设置了最大大小，当缓存的条目超过最大大小，则按照一定的策略将旧数据移除。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="缓存" scheme="http://jasonlife.top/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="缓存 架构" scheme="http://jasonlife.top/tags/%E7%BC%93%E5%AD%98-%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>大型网站系统与Java中间件实战</title>
    <link href="http://jasonlife.top/2017/10/12/24%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E7%B3%BB%E7%BB%9F%E4%B8%8EJava%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E6%88%98/"/>
    <id>http://jasonlife.top/2017/10/12/24大型网站系统与Java中间件实战/</id>
    <published>2017-10-12T06:13:46.000Z</published>
    <updated>2017-10-12T08:16:58.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Book" scheme="http://jasonlife.top/categories/Book/"/>
    
    
      <category term="Book" scheme="http://jasonlife.top/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>RPC框架学习</title>
    <link href="http://jasonlife.top/2017/10/12/23RPC%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jasonlife.top/2017/10/12/23RPC框架学习/</id>
    <published>2017-10-12T02:49:28.000Z</published>
    <updated>2017-10-12T08:16:58.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="RPC" scheme="http://jasonlife.top/categories/RPC/"/>
    
    
      <category term="RPC" scheme="http://jasonlife.top/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>史上最全的Java新手问题汇总</title>
    <link href="http://jasonlife.top/2017/09/30/22%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84Java-%E6%96%B0%E6%89%8B%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://jasonlife.top/2017/09/30/22史上最全的Java-新手问题汇总/</id>
    <published>2017-09-30T03:08:18.000Z</published>
    <updated>2017-09-30T08:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Java是目前最流行的编程语言之一——它可以用来编写Windows程序或者是Web应用，移动应用，网络程序，消费电子产品，机顶盒设备，它无处不在。<br>有超过30亿的设备是运行在Java之上的。根据Oracle的统计数据，光是使用中的Java Card就有有50亿。超过900万程序员选择使用Java进行开发，它是最受开发人员欢迎的语言，同时也是最流行的开发平台。<br>本文为那些准Java程序员们准备了一系列广为流传的Java最佳编程实践<br><a id="more"></a></p>
<h4 id="优先返回空集合而非null"><a href="#优先返回空集合而非null" class="headerlink" title="优先返回空集合而非null"></a>优先返回空集合而非null</h4><p>如果程序要返回一个不包含任何值的集合，确保返回的是空集合而不是null。这能节省大量的”if else”检查。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getLocationName</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="literal">null</span>==cityName ? <span class="string">""</span>: cityName);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="谨慎操作字符串"><a href="#谨慎操作字符串" class="headerlink" title="谨慎操作字符串"></a>谨慎操作字符串</h4><p>如果两个字符串在for循环中使用+操作符进行拼接，那么每次循环都会产生一个新的字符串对象。这不仅浪费内存空间同时还会影响性能。类似的，如果初始化字符串对象，尽量不要使用构造方法，而应该直接初始化。比方说：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Slower Instantiation</span></div><div class="line"><span class="keyword">String</span> bad = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"Yet another string object"</span>);</div><div class="line"><span class="comment">//Faster Instantiation</span></div><div class="line"><span class="keyword">String</span> good = <span class="string">"Yet another string object"</span></div><div class="line">避免无用对象</div></pre></td></tr></table></figure></p>
<p>创建对象是Java中最昂贵的操作之一。因此最好在有需要的时候再进行对象的创建/初始化。如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.ArrayList;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.List;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List Employees;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List getEmployees() &#123;</div><div class="line"></div><div class="line">        <span class="comment">//initialize only when required</span></div><div class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == Employees) &#123;</div><div class="line">            Employees = <span class="keyword">new</span> ArrayList();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Employees;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="数组与ArrayList之争"><a href="#数组与ArrayList之争" class="headerlink" title="数组与ArrayList之争"></a>数组与ArrayList之争</h4><p>开发人员经常会发现很难在数组和ArrayList间做选择。它们二者互有优劣。如何选择应该视情况而定。</p>
<p>import java.util.ArrayList;</p>
<p>public class arrayVsArrayList {</p>
<pre><code>public static void main(String[] args) {
    int[] myArray = new int[6];
    myArray[7]= 10; // ArraysOutOfBoundException

    //Declaration of ArrayList. Add and Remove of elements is easy.
    ArrayList&lt;Integer&gt; myArrayList = new ArrayList&lt;&gt;();
    myArrayList.add(1);
    myArrayList.add(2);
    myArrayList.add(3);
    myArrayList.add(4);
    myArrayList.add(5);
    myArrayList.remove(0);

    for(int i = 0; i &lt; myArrayList.size(); i++) {
    System.out.println(&quot;Element: &quot; + myArrayList.get(i));
    }

    //Multi-dimensional Array
    int[][][] multiArray = new int [3][3][3];
}
</code></pre><p>}<br>数组是定长的，而ArrayList是变长的。由于数组长度是固定的，因此在声明数组时就已经分配好内存了。而数组的操作则会更快一些。另一方面，如果我们不知道数据的大小，那么过多的数据便会导致ArrayOutOfBoundException，而少了又会浪费存储空间。<br>ArrayList在增删元素方面要比数组简单。<br>数组可以是多维的，但ArrayList只能是一维的。<br>try块的finally块没有被执行<br>看下下面这段代码：</p>
<p>public class shutDownHooksDemo {<br>    public static void main(String[] args) {<br>        for(int i=0;i&lt;5;i++)<br>        {<br>            try {<br>                if(i==4) {<br>                    System.out.println(“Inside Try Block.Exiting without executing Finally block.”);<br>                    System.exit(0);<br>                }<br>            }<br>            finally {<br>                System.out.println(“Inside Finally Block.”);<br>            }<br>        }<br>    }<br>}<br>从代码来看，貌似finally块中的println语句应该会被执行5次。但当程序运行后，你会发现finally块只执行了4次。第5次迭代的时候会触发exit函数的调用，于是这第5次的finally便永远也触发不到了。原因便是——System.exit会挂起所有线程的执行，包括当前线程。即便是try语句后的finally块，只要是执行了exit，便也无力回天了。</p>
<p>在调用System.exit时，JVM会在关闭前执行两个结束任务：</p>
<p>首先，它会执行完所有通过Runtime.addShutdownHook注册进来的终止的钩子程序。这一点很关键，因为它会释放JVM外部的资源。</p>
<p>接下来的便是Finalizer了。可能是System.runFinalizersOnExit也可能是Runtime.runFinalizersOnExit。finalizer的使用已经被废弃有很长一段时间了。finalizer可以在存活对象上进行调用，即便是这些对象仍在被其它线程所使用。而这会导致不可预期的结果甚至是死锁。</p>
<p>public class shutDownHooksDemo {</p>
<pre><code>public static void main(String[] args) {
        for(int i=0;i&lt;5;i++)
        {
                final int final_i = i;
                try {
                        Runtime.getRuntime().addShutdownHook(
                                        new Thread() {
                                        public void run() {
                                        if(final_i==4) {
                                        System.out.println(&quot;Inside Try Block.Exiting without executing Finally block.&quot;);
                                        System.exit(0);
                                        }
                                        }
                                        });
                }
                finally {
                        System.out.println(&quot;Inside Finally Block.&quot;);
                }

        }
}
</code></pre><p>}<br>判断奇数</p>
<p>看下这几行代码，看看它们是否能用来准确地判断一个数是奇数？</p>
<p>public boolean oddOrNot(int num) {<br>    return num % 2 == 1;<br>}<br>看似是对的，但是每执行四便会有一个错误的结果（用数据说话）。考虑到负奇数的情况，它除以2的结果就不会是1。因此，返回值是false，而这样是不对的。</p>
<p>代码可以修改成这样：</p>
<p>public boolean oddOrNot(int num) {<br>    return (num &amp; 1) != 0;<br>}<br>这么写不光是负奇数的问题解决了，并且还是经过充分优化过的。因为算术运算和逻辑运行要比乘除运算更高效，计算的结果也会更快。</p>
<p>单引号与双引号的区别</p>
<p>public class Haha {<br>    public static void main(String args[]) {<br>    System.out.print(“H” + “a”);<br>    System.out.print(‘H’ + ‘a’);<br>    }<br>}<br>看起来这段代码会返回”Haha”,但实际返回的是Ha169。原因就是用了双引号的时候，字符会被当作字符串处理，而如果是单引号的话，字符值会通过一个叫做基础类型拓宽的操作来转换成整型值。然后再将值相加得到169。</p>
<p>一些防止内存泄露的小技巧</p>
<p>内存泄露会导致软件的性能降级。由于Java是自动管理内存的，因此开发人员并没有太多办法介入。不过还是有一些方法能够用来防止内存泄露的。</p>
<p>查询完数据后立即释放数据库连接<br>尽可能使用finally块<br>释放静态变量中的实例<br>避免死锁<br>死锁出现的原因有很多。避免死锁不是一句话就能解决的。通常来说，当某个同步对象在等待另一个同步对象所拥有的资源上的锁时，便会产生死锁。</p>
<p>试着运行下下面的程序。它会告诉你什么是死锁。这个死锁是由于两个线程都在等待对方所拥有的资源，因此会产生死锁。它们会一直等待，没有谁会先放手。</p>
<p>public class DeadlockDemo {<br>   public static Object addLock = new Object();<br>   public static Object subLock = new Object();</p>
<p>   public static void main(String args[]) {</p>
<pre><code>MyAdditionThread add = new MyAdditionThread();
MySubtractionThread sub = new MySubtractionThread();
add.start();
sub.start();
</code></pre><p>   }<br>private static class MyAdditionThread extends Thread {<br>      public void run() {<br>         synchronized (addLock) {<br>        int a = 10, b = 3;<br>        int c = a + b;<br>            System.out.println(“Addition Thread: “ + c);<br>            System.out.println(“Holding First Lock…”);<br>            try { Thread.sleep(10); }<br>            catch (InterruptedException e) {}<br>            System.out.println(“Addition Thread: Waiting for AddLock…”);<br>            synchronized (subLock) {<br>               System.out.println(“Threads: Holding Add and Sub Locks…”);<br>            }<br>         }<br>      }<br>   }<br>   private static class MySubtractionThread extends Thread {<br>      public void run() {<br>         synchronized (subLock) {<br>        int a = 10, b = 3;<br>        int c = a - b;<br>            System.out.println(“Subtraction Thread: “ + c);<br>            System.out.println(“Holding Second Lock…”);<br>            try { Thread.sleep(10); }<br>            catch (InterruptedException e) {}<br>            System.out.println(“Subtraction  Thread: Waiting for SubLock…”);<br>            synchronized (addLock) {<br>               System.out.println(“Threads: Holding Add and Sub Locks…”);<br>            }<br>         }<br>      }<br>   }<br>}<br>输出：</p>
<p>Addition Thread: 13<br>Subtraction Thread: 7<br>Holding First Lock…<br>Holding Second Lock…<br>Addition Thread: Waiting for AddLock…<br>Subtraction  Thread: Waiting for SubLock…<br>但如果调用的顺序变一下的话，死锁的问题就解决了。</p>
<p>public class DeadlockSolutionDemo {<br>   public static Object addLock = new Object();<br>   public static Object subLock = new Object();</p>
<p>   public static void main(String args[]) {</p>
<pre><code>MyAdditionThread add = new MyAdditionThread();
MySubtractionThread sub = new MySubtractionThread();
add.start();
sub.start();
</code></pre><p>   }</p>
<p>private static class MyAdditionThread extends Thread {<br>      public void run() {<br>         synchronized (addLock) {<br>        int a = 10, b = 3;<br>        int c = a + b;<br>            System.out.println(“Addition Thread: “ + c);<br>            System.out.println(“Holding First Lock…”);<br>            try { Thread.sleep(10); }<br>            catch (InterruptedException e) {}<br>            System.out.println(“Addition Thread: Waiting for AddLock…”);<br>            synchronized (subLock) {<br>               System.out.println(“Threads: Holding Add and Sub Locks…”);<br>            }<br>         }<br>      }<br>   }</p>
<p>   private static class MySubtractionThread extends Thread {<br>      public void run() {<br>         synchronized (addLock) {<br>        int a = 10, b = 3;<br>        int c = a - b;<br>            System.out.println(“Subtraction Thread: “ + c);<br>            System.out.println(“Holding Second Lock…”);<br>            try { Thread.sleep(10); }<br>            catch (InterruptedException e) {}<br>            System.out.println(“Subtraction  Thread: Waiting for SubLock…”);<br>            synchronized (subLock) {<br>               System.out.println(“Threads: Holding Add and Sub Locks…”);<br>            }<br>         }<br>      }<br>   }<br>}<br>输出：</p>
<p>Addition Thread: 13<br>Holding First Lock…<br>Addition Thread: Waiting for AddLock…<br>Threads: Holding Add and Sub Locks…<br>Subtraction Thread: 7<br>Holding Second Lock…<br>Subtraction  Thread: Waiting for SubLock…<br>Threads: Holding Add and Sub Locks…<br>替Java省点内存</p>
<p>某些Java程序是CPU密集型的，但它们会需要大量的内存。这类程序通常运行得很缓慢，因为它们对内存的需求很大。为了能提升这类应用的性能，可得给它们多留点内存。因此，假设我们有一台拥有10G内存的Tomcat服务器。在这台机器上，我们可以用如下的这条命令来分配内存:</p>
<p>export JAVA_OPTS=”$JAVA_OPTS -Xms5000m -Xmx6000m -XX:PermSize=1024m -XX:MaxPermSize=2048m”<br>Xms = 最小内存分配<br>Xmx = 最大内存分配<br>XX:PermSize = JVM启动时的初始大小<br>XX:MaxPermSize = JVM启动后可分配的最大空间<br>如何计算Java中操作的耗时<br>在Java中进行操作计时有两个标准的方法：System.currentTimeMillis()和System.nanoTime()。问题就在于，什么情况下该用哪个。从本质上来讲，他们的作用都是一样的，但有以下几点不同：</p>
<p>System.currentTimeMillis()的精度在千分之一秒到千分之15秒之间（取决于系统）而System.nanoTime()则能到纳秒级。<br>System.currentTimeMillis读操作耗时在数个CPU时钟左右。而System.nanoTime()则需要上百个。<br>System.currentTimeMillis对应的是绝对时间（1970年1 月1日所经历的毫秒数），而System.nanoTime()则不与任何时间点相关。<br>Float还是double<br>数据类型    所用字节    有效位数<br>float    4    7<br>double    8    15<br>在对精度要求高的场景下，double类型相对float要更流行一些，理由如下：</p>
<p>大多数处理器在处理float和double上所需的时间都是差不多的。而计算时间一样的前提下，double类型却能提供更高的精度。</p>
<p>幂运算</p>
<p>Java是通过异或操作来进行幂运算的。Java对于幂运算有两种处理方式：</p>
<p>乘积：</p>
<p>double square = double a <em> double a;                           // Optimized<br>double cube = double a </em> double a <em> double a;                   // Non-optimized<br>double cube = double a </em> double square;                       // Optimized<br>double quad = double a <em> double a </em> double a <em> double a;          // Non-optimized<br>double quad = double square </em> double square;                  // Optimized<br>pow方法：在无法使用乘积的情况下可以使用pow方法。</p>
<p>double cube = Math.pow(base, exponent);<br>不到万不得已不要使用Math.pow。比方说，当指数是小数的时候。因为Math.pow要比乘积慢300-600倍左右。</p>
<p>如何处理空指针异常</p>
<p>空指针异常是Java中很常见的异常。当你尝试调用一个null对象上的方法时便会抛出这个异常。比如：</p>
<p>int noOfStudents = school.listStudents().count;<br>在上述例子中，school为空或者listStudents()为空都可能会抛出了NullPointerException。因此最好检查下对象是否为空以避免类似情况。</p>
<p>private int getListOfStudents(File[] files) {<br>      if (files == null)<br>        throw new NullPointerException(“File list cannot be null”);<br>    }<br>JSON编码</p>
<p>JSON是数据存储及传输的一种协议。与XML相比，它更易于使用。由于它非常轻量级以及自身的一些特性，现在JSON在网络上已经是越来越流行了。常见的数据结构都可以编码成JSON然后在各个网页间自由地传输。不过在开始编码前，你得先安装一个JSON解析器。在下面的例子中，我们将使用json.simple库来完成这项工作 (<a href="https://code.google.com/p/json-simple/)。" target="_blank" rel="external">https://code.google.com/p/json-simple/)。</a></p>
<p>下面是编码成JSON串的一个简单的例子。</p>
<p>import org.json.simple.JSONObject;<br>import org.json.simple.JSONArray;</p>
<p>public class JsonEncodeDemo {</p>
<pre><code>public static void main(String[] args) {

    JSONObject obj = new JSONObject();
    obj.put(&quot;Novel Name&quot;, &quot;Godaan&quot;);
    obj.put(&quot;Author&quot;, &quot;Munshi Premchand&quot;);

    JSONArray novelDetails = new JSONArray();
    novelDetails.add(&quot;Language: Hindi&quot;);
    novelDetails.add(&quot;Year of Publication: 1936&quot;);
    novelDetails.add(&quot;Publisher: Lokmanya Press&quot;);

    obj.put(&quot;Novel Details&quot;, novelDetails);

    System.out.print(obj);
}
</code></pre><p>}<br>输出：</p>
<p>{“Novel Name”:”Godaan”,”Novel Details”:[“Language: Hindi”,”Year of Publication: 1936”,”Publisher: Lokmanya Press”],”Author”:”Munshi Premchand”}<br>JSON解析</p>
<p>开发人员要想解析JSON串，首先你得知道它的格式。下面例子有助于你来理解这一点：</p>
<p>import java.io.FileNotFoundException;<br>import java.io.FileReader;<br>import java.io.IOException;<br>import java.util.Iterator;</p>
<p>import org.json.simple.JSONArray;<br>import org.json.simple.JSONObject;<br>import org.json.simple.parser.JSONParser;<br>import org.json.simple.parser.ParseException;</p>
<p>public class JsonParseTest {</p>
<pre><code>private static final String filePath = &quot;//home//user//Documents//jsonDemoFile.json&quot;;

public static void main(String[] args) {

    try {
        // read the json file
        FileReader reader = new FileReader(filePath);
        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObject = (JSONObject)jsonParser.parse(reader);

        // get a number from the JSON object
        Long id =  (Long) jsonObject.get(&quot;id&quot;);
        System.out.println(&quot;The id is: &quot; + id);

        // get a String from the JSON object
        String   type = (String) jsonObject.get(&quot;type&quot;);
        System.out.println(&quot;The type is: &quot; + type);

        // get a String from the JSON object
        String   name = (String) jsonObject.get(&quot;name&quot;);
        System.out.println(&quot;The name is: &quot; + name);

        // get a number from the JSON object
        Double ppu =  (Double) jsonObject.get(&quot;ppu&quot;);
        System.out.println(&quot;The PPU is: &quot; + ppu);

        // get an array from the JSON object
        System.out.println(&quot;Batters:&quot;);
        JSONArray batterArray= (JSONArray) jsonObject.get(&quot;batters&quot;);
        Iterator i = batterArray.iterator();
        // take each value from the json array separately
        while (i.hasNext()) {
            JSONObject innerObj = (JSONObject) i.next();
            System.out.println(&quot;ID &quot;+ innerObj.get(&quot;id&quot;) +
                    &quot; type &quot; + innerObj.get(&quot;type&quot;));
        }

        // get an array from the JSON object
        System.out.println(&quot;Topping:&quot;);
        JSONArray toppingArray= (JSONArray) jsonObject.get(&quot;topping&quot;);
        Iterator j = toppingArray.iterator();
        // take each value from the json array separately
        while (j.hasNext()) {
            JSONObject innerObj = (JSONObject) j.next();
            System.out.println(&quot;ID &quot;+ innerObj.get(&quot;id&quot;) +
                    &quot; type &quot; + innerObj.get(&quot;type&quot;));
        }

    } catch (FileNotFoundException ex) {
        ex.printStackTrace();
    } catch (IOException ex) {
        ex.printStackTrace();
    } catch (ParseException ex) {
        ex.printStackTrace();
    } catch (NullPointerException ex) {
        ex.printStackTrace();
    }

}
</code></pre><p>}<br>jsonDemoFile.json</p>
<p>{<br>    “id”: 0001,<br>    “type”: “donut”,<br>    “name”: “Cake”,<br>    “ppu”: 0.55,<br>    “batters”:<br>        [<br>            { “id”: 1001, “type”: “Regular” },<br>            { “id”: 1002, “type”: “Chocolate” },<br>            { “id”: 1003, “type”: “Blueberry” },<br>            { “id”: 1004, “type”: “Devil’s Food” }<br>        ],<br>    “topping”:<br>        [<br>            { “id”: 5001, “type”: “None” },<br>            { “id”: 5002, “type”: “Glazed” },<br>            { “id”: 5005, “type”: “Sugar” },<br>            { “id”: 5007, “type”: “Powdered Sugar” },<br>            { “id”: 5006, “type”: “Chocolate with Sprinkles” },<br>            { “id”: 5003, “type”: “Chocolate” },<br>            { “id”: 5004, “type”: “Maple” }<br>        ]<br>}<br>The id is: 1<br>The type is: donut<br>The name is: Cake<br>The PPU is: 0.55<br>Batters:<br>ID 1001 type Regular<br>ID 1002 type Chocolate<br>ID 1003 type Blueberry<br>ID 1004 type Devil’s Food<br>Topping:<br>ID 5001 type None<br>ID 5002 type Glazed<br>ID 5005 type Sugar<br>ID 5007 type Powdered Sugar<br>ID 5006 type Chocolate with Sprinkles<br>ID 5003 type Chocolate<br>ID 5004 type Maple<br>简单字符串查找</p>
<p>Java提供了一个库函数叫做indexOf()。这个方法可以用在String对象上，它返回的是要查找的字符串所在的位置序号。如果查找不到则会返回-1。</p>
<p>列出目录下的文件</p>
<p>你可以用下面的代码来列出目录下的文件。这个程序会遍历某个目录下的所有子目录及文件，并存储到一个数组里，然后通过遍历数组来列出所有文件。</p>
<p>import java.io.*;</p>
<p>public class ListContents {<br>    public static void main(String[] args) {<br>        File file = new File(“//home//user//Documents/“);<br>        String[] files = file.list();</p>
<pre><code>    System.out.println(&quot;Listing contents of &quot; + file.getPath());
    for(int i=0 ; i &lt; files.length ; i++)
    {
        System.out.println(files[i]);
    }
}
</code></pre><p>}<br>一个简单的IO程序</p>
<p>Java提供了FileInputStream以及FileOutputStream类来进行文件的读写操作。FileInputStream的构造方法会接收输入文件的路径作为入参然后创建出一个文件的输入流。同样的，FileOutputStream的构造方法也会接收一个文件路径作为入参然后创建出文件的输出流。在处理完文件之后，一个很重要的操作就是要记得”close”掉这些流。</p>
<p>import java.io.*;</p>
<p>public class myIODemo {<br>    public static void main(String args[]) throws IOException {<br>        FileInputStream in = null;<br>        FileOutputStream out = null;</p>
<pre><code>    try {
        in = new FileInputStream(&quot;//home//user//Documents//InputFile.txt&quot;);
        out = new FileOutputStream(&quot;//home//user//Documents//OutputFile.txt&quot;);

        int c;
        while((c = in.read()) != -1) {
            out.write(c);
        }
    } finally {
        if(in != null) {
            in.close();
        }
        if(out != null) {
            out.close();
        }
    }
}
</code></pre><p>}<br>在Java中执行某个shell命令</p>
<p>Java提供了Runtime类来执行shell命令。由于这些是外部的命令，因此异常处理就显得异常重要。在下面的例子中，我们将通过一个简单的例子来演示一下。我们会在shell命令行中打开一个pdf文件。</p>
<p>import java.io.BufferedReader;<br>import java.io.InputStream;<br>import java.io.InputStreamReader;</p>
<p>public class ShellCommandExec {</p>
<pre><code>public static void main(String[] args) {
    String gnomeOpenCommand = &quot;gnome-open //home//user//Documents//MyDoc.pdf&quot;;

    try {
        Runtime rt = Runtime.getRuntime();
        Process processObj = rt.exec(gnomeOpenCommand);

        InputStream stdin = processObj.getErrorStream();
        InputStreamReader isr = new InputStreamReader(stdin);
        BufferedReader br = new BufferedReader(isr);

        String myoutput = &quot;&quot;;

        while ((myoutput=br.readLine()) != null) {
            myoutput = myoutput+&quot;/n&quot;;
        }
        System.out.println(myoutput);
    }
    catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre><p>}<br>使用正则</p>
<p>正则表达式的结构摘录如下（来源: Oracle官网）</p>
<p>字符</p>
<p>x    字符x<br>/    反斜杠<br>/0n    8进制值为0n的字符(0&lt;=n&lt;=7)<br>/0nn<br>/0mnn    8进制值为0mnn的字符(0 &lt;= m &lt;= 3, 0&lt;=n&lt;=7)<br>/xhh    16进制值为0xhh的字符<br>/uhhhh    16进制值为0xhhhh的字符<br>/x{h…h}    16进制值为0xh…h的字符(Character.MINCODEPOINT &lt;= 0xh…h &lt;= Character.MAXCODEPOINT)<br>/t    制表符(‘/u0009′)<br>/n    换行符(‘/u000A’)<br>/r    回车(‘/u000D’)<br>/f    分页符(‘/u000C’)<br>/a    警告符(‘/u0007′)<br>/e    ESC(‘/u001B’)<br>/cx    ctrl+x<br>字符分类</p>
<p>[abc]    a, b或c<br>[^abc]    abc以外的任意字符<br>[a-zA-Z]    a到z以及A到Z<br>[a-d[m-p]]    a到d或者m到p[a-dm-p]则是取并集<br>[a-z&amp;&amp;[def]]    d,e或f(交集)<br>[ad-z]<br>[a-z&amp;&amp;[^bc]]    a到z但不包括b和c<br>[a-z&amp;&amp;[^m-p]]    a到z但不包括mp:也就是[a-lq-z]<br>预定义字符</p>
<p>.    任意字符，有可能包括换行符<br>/d    0到9的数字<br>/D    0到9以外的字符<br>/s    空格符[ /t/n/x0B/f/r]<br>/S    非空格符[^/s]<br>/w    字母[a-zA-Z_0-9]<br>/W    非字母[^/w]<br>边界匹配</p>
<p>^    行首<br>$    行末<br>/b    单词边界<br>/A    输入的起始位置<br>/G    前一个匹配的末尾<br>/Z    输入的结束位置，仅用于最后的结束符<br>/z    输入的结束位置<br>import java.util.regex.Matcher;<br>import java.util.regex.Pattern;</p>
<p>public class RegexMatches<br>{<br>    private static String pattern =  “^[_A-Za-z0-9-]+(//.[_A-Za-z0-9-]+)<em>@[A-Za-z0-9]+(//.[A-Za-z0-9]+)</em>(//.[A-Za-z]{2,})$”;<br>    private static Pattern mypattern = Pattern.compile(pattern);</p>
<pre><code>public static void main( String args[] ){

    String valEmail1 = &quot;testemail@domain.com&quot;;
    String invalEmail1 = &quot;....@domain.com&quot;;
    String invalEmail2 = &quot;.$$%%@domain.com&quot;;
    String valEmail2 = &quot;test.email@domain.com&quot;;

    System.out.println(&quot;Is Email ID1 valid? &quot;+validateEMailID(valEmail1));
    System.out.println(&quot;Is Email ID1 valid? &quot;+validateEMailID(invalEmail1));
    System.out.println(&quot;Is Email ID1 valid? &quot;+validateEMailID(invalEmail2));
    System.out.println(&quot;Is Email ID1 valid? &quot;+validateEMailID(valEmail2));

}

public static boolean validateEMailID(String emailID) {
    Matcher mtch = mypattern.matcher(emailID);
    if(mtch.matches()){
        return true;
    }
    return false;
}
</code></pre><p>}<br>Java Swing的简单示例</p>
<p>有了Java的swing，你便可以编写GUI应用了。Java所提供的javax包中就包含了swing。使用swing来编写GUI程序首先需要继承下JFrame。然后在里面添加Box，然后便可以往里面添加诸如按钮，多选按钮，文本框等控件了。这些Box是放在Container的最外层的。</p>
<p>import java.awt.<em>;<br>import javax.swing.</em>;</p>
<p>public class SwingsDemo extends JFrame<br>{<br>    public SwingsDemo()<br>    {<br>        String path = “//home//user//Documents//images”;<br>        Container contentPane = getContentPane();<br>        contentPane.setLayout(new FlowLayout());</p>
<pre><code>    Box myHorizontalBox = Box. createHorizontalBox();
    Box myVerticleBox = Box. createVerticalBox();

    myHorizontalBox.add(new JButton(&quot;My Button 1&quot;));
    myHorizontalBox.add(new JButton(&quot;My Button 2&quot;));
    myHorizontalBox.add(new JButton(&quot;My Button 3&quot;));

    myVerticleBox.add(new JButton(new ImageIcon(path + &quot;//Image1.jpg&quot;)));
    myVerticleBox.add(new JButton(new ImageIcon(path + &quot;//Image2.jpg&quot;)));
    myVerticleBox.add(new JButton(new ImageIcon(path + &quot;//Image3.jpg&quot;)));

    contentPane.add(myHorizontalBox);
    contentPane.add(myVerticleBox);

    pack();
    setVisible(true);
}

public static void main(String args[]) {
    new SwingsDemo();
}
</code></pre><p>}<br>使用Java播放音频</p>
<p>在Java中，播放音频是一个很常见的需求，尤其是在游戏开发里面。</p>
<p>下面这个DEMO演示了如何在Java中播放音频。</p>
<p>import java.io.<em>;<br>import java.net.URL;<br>import javax.sound.sampled.</em>;<br>import javax.swing.*;</p>
<p>// To play sound using Clip, the process need to be alive.<br>// Hence, we use a Swing application.<br>public class playSoundDemo extends JFrame {</p>
<p>   // Constructor<br>   public playSoundDemo() {<br>      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>      this.setTitle(“Play Sound Demo”);<br>      this.setSize(300, 200);<br>      this.setVisible(true);</p>
<pre><code>try {
   URL url = this.getClass().getResource(&quot;MyAudio.wav&quot;);
   AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);
   Clip clip = AudioSystem.getClip();
   clip.open(audioIn);
   clip.start();
} catch (UnsupportedAudioFileException e) {
   e.printStackTrace();
} catch (IOException e) {
   e.printStackTrace();
} catch (LineUnavailableException e) {
   e.printStackTrace();
}
</code></pre><p>   }</p>
<p>   public static void main(String[] args) {<br>      new playSoundDemo();<br>   }<br>}<br>导出PDF文件</p>
<p>将表格导出成pdf也是一个比较常见的需求。通过itextpdf，导出pdf也不是什么难事。</p>
<p>import java.io.FileOutputStream;<br>import com.itextpdf.text.Document;<br>import com.itextpdf.text.Paragraph;<br>import com.itextpdf.text.pdf.PdfPCell;<br>import com.itextpdf.text.pdf.PdfPTable;<br>import com.itextpdf.text.pdf.PdfWriter;</p>
<p>public class DrawPdf {</p>
<pre><code>  public static void main(String[] args) throws Exception {
    Document document = new Document();
    PdfWriter.getInstance(document, new FileOutputStream(&quot;Employee.pdf&quot;));
    document.open();

    Paragraph para = new Paragraph(&quot;Employee Table&quot;);
    para.setSpacingAfter(20);
    document.add(para);

    PdfPTable table = new PdfPTable(3);
    PdfPCell cell = new PdfPCell(new Paragraph(&quot;First Name&quot;));

    table.addCell(cell);
    table.addCell(&quot;Last Name&quot;);
    table.addCell(&quot;Gender&quot;);
    table.addCell(&quot;Ram&quot;);
    table.addCell(&quot;Kumar&quot;);
    table.addCell(&quot;Male&quot;);
    table.addCell(&quot;Lakshmi&quot;);
    table.addCell(&quot;Devi&quot;);
    table.addCell(&quot;Female&quot;);

    document.add(table);

    document.close();
  }
}
</code></pre><p>邮件发送</p>
<p>在Java中发送邮件也很简单。你只需装一下Java Mail这个jar包，放到你的类路径里即可。在下面的代码中，我们设置了几个基础属性，然后便可以发送邮件了：</p>
<p>import java.util.<em>;<br>import javax.mail.</em>;<br>import javax.mail.internet.*;</p>
<p>public class SendEmail<br>{<br>    public static void main(String [] args)<br>    {<br>        String to = “recipient@gmail.com”;<br>        String from = “sender@gmail.com”;<br>        String host = “localhost”;</p>
<pre><code>    Properties properties = System.getProperties();
    properties.setProperty(&quot;mail.smtp.host&quot;, host);
    Session session = Session.getDefaultInstance(properties);

    try{
        MimeMessage message = new MimeMessage(session);
        message.setFrom(new InternetAddress(from));

        message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));

        message.setSubject(&quot;My Email Subject&quot;);
        message.setText(&quot;My Message Body&quot;);
        Transport.send(message);
        System.out.println(&quot;Sent successfully!&quot;);
    }
    catch (MessagingException ex) {
        ex.printStackTrace();
    }
}
</code></pre><p>}<br>计算时间</p>
<p>许多程序都需要精确的时间计量。Java提供了一个System的静态方法来支持这一功能：</p>
<p>currentTimeMillis()：返回当前时间自新纪元时间以来的毫秒值，long类型。</p>
<p>long startTime = System.currentTimeMillis();<br>long estimatedTime = System.currentTimeMillis() - startTime;<br>nanoTime()：返回系统计时器当前的精确时间，纳秒值，这也是long类型。nanoTime()主要是用于计算相对时间而非绝对时间。</p>
<p>long startTime = System.nanoTime();<br>long estimatedTime = System.nanoTime() - startTime;<br>图片缩放</p>
<p>图片缩放可以通过AffineTransform来完成。首先要生成一个输入图片的图片缓冲，然后通过它来渲染出缩放后的图片。</p>
<p>import java.awt.Graphics2D;<br>import java.awt.geom.AffineTransform;<br>import java.awt.image.BufferedImage;<br>import java.io.File;<br>import javax.imageio.ImageIO;</p>
<p>public class RescaleImage {<br>  public static void main(String[] args) throws Exception {<br>    BufferedImage imgSource = ImageIO.read(new File(“images//Image3.jpg”));<br>    BufferedImage imgDestination = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);<br>    Graphics2D g = imgDestination.createGraphics();<br>    AffineTransform affinetransformation = AffineTransform.getScaleInstance(2, 2);<br>    g.drawRenderedImage(imgSource, affinetransformation);<br>    ImageIO.write(imgDestination, “JPG”, new File(“outImage.jpg”));<br>  }<br>}<br>捕获鼠标动作</p>
<p>实现了MouseMotionListner接口后，便可以捕获鼠标事件了。 当鼠标进入到某个特定区域时便会触发MouseMoved事件，你便能捕获到这个移动的动作了。通过一个例子来看下：</p>
<p>import java.awt.event.<em>;<br>import javax.swing.</em>;</p>
<p>public class MouseCaptureDemo extends JFrame implements MouseMotionListener<br>{<br>    public JLabel mouseHoverStatus;</p>
<pre><code>public static void main(String args[])
{
    new MouseCaptureDemo();
}

MouseCaptureDemo()
{
    setSize(500, 500);
    setTitle(&quot;Frame displaying Coordinates of Mouse Motion&quot;);

    mouseHoverStatus = new JLabel(&quot;No Mouse Hover Detected.&quot;, JLabel.CENTER);
    add(mouseHoverStatus);
    addMouseMotionListener(this);
    setVisible(true);
}

public void mouseMoved(MouseEvent e)
{
    mouseHoverStatus.setText(&quot;Mouse Cursor Coordinates =&gt; X:&quot;+e.getX()+&quot; | Y:&quot;+e.getY());
}

public void mouseDragged(MouseEvent e)
{}
</code></pre><p>}<br>FileOutputStream Vs. FileWriter</p>
<p>在Java中有两种写文件的方式：FileOutputStream与FileWriter。开发人员经常会在它们之间犹豫不决。下面这个例子能帮忙你更好地理解在不同的场景下应该选择何种方案。首先我们来看一下实现：</p>
<p>使用FileOutputStream：</p>
<p>File foutput = new File(file_location_string);<br>FileOutputStream fos = new FileOutputStream(foutput);<br>BufferedWriter output = new BufferedWriter(new OutputStreamWriter(fos));<br>output.write(“Buffered Content”);<br>使用FileWriter：</p>
<p>FileWriter fstream = new FileWriter(file_location_string);<br>BufferedWriter output = new BufferedWriter(fstream);<br>output.write(“Buffered Content”);<br>根据Java的接口规范：</p>
<p>FileOutputStream是用于写入原始字节流比如图片流数据。如果是要写入字符流，则应该考虑使用FileWriter。</p>
<p>这样就很清楚了，写图片应该使用FileOutputStream而写文本则应该选择FileWriter。</p>
<p>附加建议</p>
<p>集合的使用</p>
<p>Java提供了许多集合类——比如，Vector，Stack，Hashtable等。所以鼓励开发人员尽可能地使用这些集合类有如下原因：</p>
<p>使用集合使得代码的可重用度更高。<br>集合类使得代码的结构更良好，更易于理解与维护。<br>最重要的是这些集合类都经过充分的测试，代码质量很高。<br>1-50-500规则</p>
<p>在大型软件系统中，代码的可维护性是件很有挑战的工作。新加入的开发人员经常会抱怨这些情况：单片代码（Monolithic Code）,意大利面式代码（spaghetti code, 常用于描述捆绑在一起并且低内聚的类和方法）。保持代码的整洁与可维护有一条很简单的规则：</p>
<p>10：包内的类不超过10个<br>50：方法的代码行数不超过50<br>500：类的代码行数不超过500<br>SOLID设计准则<br>SOLID是Robert Martin提出的一套设计准则的简称。根据他的准则：<br>一个类应当有仅只有一个任务/职责。执行多个任务的类会让人觉得困惑。</p>
<p>单一职责原则<br>开闭原则    开发人员应当优先考虑扩展现有的软件功能，而不是是修改它。<br>里氏替换原则    子类必须能够替换掉他们的父类型<br>接口隔离原则    和单一职责原则类似，但它特指的是接口层。每个接口都应当只负责一项任务。<br>依赖反转原则    依赖抽象而不是具体实现。也就是说每个模块都应当通过一个抽象层与其它模块进行解耦。<br>设计模式的使用</p>
<p>设计模式能帮助开发人员更好地在软件中应用软件的设计准则。它还为开发人员提供了跨语言的通用平台。设计模式中的标准术语能让开发人员更容易进行沟通。</p>
<p>关于文档</p>
<p>不要上来就开始写代码。制定计划，准备，编写文档，检查然后再去实现。首先，先把需求记下来。然后去准备设计文档。合理地去假设举证。互相review方案然后进行确认。</p>
<p>使用equals而非==</p>
<p>==是用来比较对象引用的，它会检查两个操作数指向的是不是同一个对象（不是相同的对象，而是同一个对象）。而”equals”则比较的是两个字符串是不是相同（假设是字符串对象）。</p>
<p>避免使用浮点数</p>
<p>只有当确实有必要的时候才使用浮点数。比方说，使用浮点数来表示卢比或者派萨就很容易产生问题——这种情况应当使用BigDecimal。而浮点数更多地是用于测量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java是目前最流行的编程语言之一——它可以用来编写Windows程序或者是Web应用，移动应用，网络程序，消费电子产品，机顶盒设备，它无处不在。&lt;br&gt;有超过30亿的设备是运行在Java之上的。根据Oracle的统计数据，光是使用中的Java Card就有有50亿。超过900万程序员选择使用Java进行开发，它是最受开发人员欢迎的语言，同时也是最流行的开发平台。&lt;br&gt;本文为那些准Java程序员们准备了一系列广为流传的Java最佳编程实践&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://jasonlife.top/categories/Java/"/>
    
    
      <category term="面试 Java" scheme="http://jasonlife.top/tags/%E9%9D%A2%E8%AF%95-Java/"/>
    
  </entry>
  
  <entry>
    <title>程序员最核心的竞争力是什么？</title>
    <link href="http://jasonlife.top/2017/09/27/21%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E6%A0%B8%E5%BF%83%E7%9A%84%E7%AB%9E%E4%BA%89%E5%8A%9B%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://jasonlife.top/2017/09/27/21程序员最核心的竞争力是什么？/</id>
    <published>2017-09-27T07:52:45.000Z</published>
    <updated>2017-09-27T08:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>进行社招面试时，有一个问题几乎是必问的：</p>
<blockquote>
<p>你为什么要离开上一家公司？</p>
</blockquote>
<p>其实这个问题主要是想试探一下求职者的核心诉求，并借此预估一下他在本公司工作的稳定性。常见的答案也无非就是这么几种：对薪酬不满意、干得不爽，或者是想换个环境。<br><a id="more"></a><br>然而，我遇到过好几个初次跳槽的求职者给出的答案是：「在原来的公司学不到技术」。<br>一听到这个，我就不由得叹口气：今天这一小时又算是交代了，这人基本上没戏。因为根据我的经验，这句话如果由工作不满两年的人说出来，很大概率这是个不会学习不会感恩又特别爱抱怨的人。<br>程序员最核心的竞争力——「学习力」<br>如果有人问我：你在面试程序员时，最看中的是什么能力？那我的答案一定是：学习力。<br>互联网时代的技术来得快，去得更快。就像Flash这样曾经雄霸天下多年的技术，都有被人人唾弃的一天。如果没有足够强的学习能力，就无法跟上变化，被淘汰只是迟早的事。想想看，你苦心钻研多年引以为傲的技术，一夜之间就没有用武之地了，难免会有一种「身体被掏空」的感觉。<br>学习力强的程序员敢大胆地体验尝试新技术，他们的技术栈始终在保持不断地更新。他们能快速把握事物的本质，并判断出它能用来做什么，不能用来做什么。他们拥抱技术升级和革命，因为他们学习并掌握新技术的速度比其他人更快，所以他们永远不用担心失业。事实上，他们掌握的是「驾驶」和「学习驾驶」的技术，而不是「驾驶XX牌汽车」的技术。<br>而学习力差的程序员呢？为了继续停留在旧技术的舒适区，他们往往会抵制新技术的推广，甚至百般阻挠。因为那会使他们过去的经验统统无效，只能和后来者站在同一起跑线上。抱死一个框架好几年，脱离了框架啥都干不了的程序员实在太多了。事实上，这样的人不能驾驭技术，反而是被技术给奴役了。<br>同样是自行车，为什么山地车比公路车更普及更流行？除了皮实耐用价格低外，主要是因为它的通过性好，什么泥地沙地都不在话下，上下马路牙子跟玩一样。而公路车呢？只能老老实实地跑在平路上。<br>公司不是学校<br>面对这些因为「想学点技术」而换工作的求职者，评价他们「不思进取」貌似不太合适。但显然他们的思维模式还是被学校洗脑的那一套，没能真正地融入社会。也许他们认为，学习就是要由老师手把手带着，而自己之所以学不到技术，就是因为没遇到一个好leader，能替自己设计好成长路线，指出所有重难点，提供各种参考资料……<br>在中国传统文化里，不管是匠人还是武师，收徒都要找毫无根基的幼童。这一方面是为了保持师父的绝对权威，方便贯彻落实教学；另一方面是为了尽量延长学徒期，以考察徒弟的品性。拜师之后，徒弟便跟随师父一起生活，经过数年的言传身教，这才得以出师。<br>师父收徒的核心诉求，是「传承」自己的技艺和名声，希望徒弟日后能做出一番成就来光耀师门。这就要求徒弟流动性低、忠诚度高、归属感强。与其说是收徒，还不如说是在挑儿子，所以有句俗话叫作「一日为师，终身为父」。<br>然而公司是盈利性的商业组织，不是学校，更不是新手训练营。公司招聘员工的核心诉求，是生产出实实在在、对得起薪水的价值，而不是传承技艺。公司希望员工入职前就具备工作的能力，至少在经过短暂的培训和指导后就能独立开展工作，正所谓「能干就干，干不了走人」。<br>一般情况下，为了使新人尽快进入工作状态，公司会安排一位老员工来做一段时间的导师。但导师只有为你解惑的义务，却没有教你技术的责任。 因为导师自己手里还有做不完的工作，带新人又没什么利益可图，凭什么为你提供私人教练级的服务？能有耐心听完你的问题，指点一下方向，就已经很不错了。<br>学习是自己的事，没有人能替你去做。这就跟吃饭一样，谁真的关心你吃没吃、饱没饱？就算你的亲人再怎么关心你，也不能替你去吃。我们都知道，人不吃饭肯定是要饿死的，那你为什么不去给自己找吃的，却在埋怨没有人给你嘴里喂食呢？<br>为什么你学不到技术？<br>很多人在学习之路上已经饱尝了痛苦的滋味，因此在离开学校之后。他们不到万不得已，是决然不会去学习的。你不妨回顾一下，从参加工作以来到现在，自己哪段时间里学习最认真，进步最明显？<br>如果不出意外的话，应该就是你找到的第一份工作的试用期。因为不想失去自己通过努力争取到的工作机会，所以你不得不逼自己打起十二份精神来学习，结果居然以自己都无法想象的速度掌握了工作必备的知识和技能。<br>然而，大多数人在自己的能力满足当前工作的要求之后，就丧失了学习的动力。下班之后要追剧，要玩游戏，要打球，要谈恋爱……为啥我要学习？不学又不会失业！学这个有啥用？谁知道用得上用不上？等要用的时候再学呗！<br>其实， 学不到技术最核心的原因只有一个：动机不足。至于环境条件，只是影响学习效果的因素之一，但绝对不是最重要的因素。在一个恶劣的环境里选择放弃学习的人，不可能到了一个优越的环境里就会去主动学习，因为在他内心深处对学习是抗拒的。<br>难道说换上了Macbook Pro和4k显示器，坐在数千元的人体工学座椅上，下班后就会有兴趣看框架源码了吗？看电影、打游戏不是更舒服一些？<br>在我看来，学习力的源泉就是好奇心，也就是对新知识的渴求，以及对探索未知的冲动。我们的大脑是「用进废退」的，如果不定期给它输送新鲜的知识营养，它就会逐渐退化。有学习力的人一段时间不看书，不折腾点新玩意，大脑真的是会「饿」的。<br>程序员该怎么学习技术？<br>有的求职者觉得自己没学到技术，是因为公司不给机会，或者缺乏条件：<br>「上次的H5让小王做了，这次的微信小程序又给了小李……完全没我什么事啊！」<br>「公司最大一张表才10W数据，根本用不着分库分表啊！」<br>……<br>学习技术最有效的方式是阅读、实践和交流。公司没给你安排这方面的工作，那你自己都做了些什么呢？八小时之外的时间都用在哪了？有没有读源码？有没有看原版书？有没有泡技术社区？有没有尝试最新流行的技术？有没有尝试把它们用在公司的项目上？有没有主动去接触行业里使用这些技术的团队和大牛？<br>「看文档」其实是最快的学习方法。对于自己工作中常用到的技术，抽时间把官方文档通读一遍（其实篇幅都不大），绝对收获满满。没事的时候多翻翻自己使用的框架/系统/平台的API，看看有哪些自己不知道或者没用过的功能，想想这个功能可以用来做什么，能不能解决现存的问题，或者优化当下的解决方案。<br>如果你是前端工程师，通读HTTP协议和ECMAScript标准，就能秒杀95%的同行，不开玩笑。<br>「读源码」是深入学习开源技术的唯一途径。只有理解了某个功能在底层是如何实现的，你才能真正把握它更适合用来做什么，不能用来做什么。正如不明显汽车的构造和原理，我们也能把车开好。而如果多少知道一点，开起来就会更得心应手。当车出现问题时，也不至于完全束手无策，只能蹲在路边等待救援。<br>你一个框架用了N年了，却连一行源码都没读过？如果它是你女朋友，估计早该分手了。<br>「折腾」是学习任何技术的必经之路。在有保护的环境下进行大量的试错，是最高效的学习方法。现在虚拟机技术已经那么成熟，VPS也很便宜，你为什么不分分钟弄一个，然后在上面花式作死呢？<br>听说过无数次 rm -rf / 的事故，可你居然一次都没试过？知道输出啥样子么？<br>公司给你提供的最有价值的东西，就是实战的机会。 你所学习的技术，最终需要通过工作来变现。你有机会接触到真实的数据，了解真实的用户，观察真实系统是怎样运转的，积累真实的经验……<br>然而，所谓的机会，只属于已经提前准备好的人。 不要等到工作都安排到你身上了再去学习。公司不是你的试验田，你也不该拿用户当小白鼠。公司不给你机会，那只说明你还没有准备好。<br>后话<br>「吾生也有涯，而知也无涯 。以有涯随无涯，殆已！」*——《庄子·内篇·养生主第三》<br>技术世界就如同一片汪洋大海，细分领域真是多如牛毛。我们只是站在其中一个小岛上，怎么确定自己该朝哪个方向进发呢？<br>学习技术不外乎以下两个方向：<br>1、广度：整个使用链条由哪些环节构成？每个环节的作用是什么？都有哪些类似的可替代方案？它们之间有什么区别？各自优劣点是什么？……<br>2、深度：这个「技术 / 产品」的本质是什么？都能做什么？运作原理是什么？底层是如何实现的？可以做怎样的改进？……<br>不管你在做什么工作，都应该先把自己每天都要用的核心技术做到一定深度，再去拓展广度。 「什么都知道一点，但都不甚了解」是最可怕的，它会让你误以为自己已经很NB了。<br>学习，是一辈子的事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进行社招面试时，有一个问题几乎是必问的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你为什么要离开上一家公司？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实这个问题主要是想试探一下求职者的核心诉求，并借此预估一下他在本公司工作的稳定性。常见的答案也无非就是这么几种：对薪酬不满意、干得不爽，或者是想换个环境。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="职业规划" scheme="http://jasonlife.top/categories/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
    
      <category term="面试 Java" scheme="http://jasonlife.top/tags/%E9%9D%A2%E8%AF%95-Java/"/>
    
  </entry>
  
  <entry>
    <title>20一致性哈希算法</title>
    <link href="http://jasonlife.top/2017/09/18/20%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://jasonlife.top/2017/09/18/20一致性哈希算法/</id>
    <published>2017-09-18T09:59:31.000Z</published>
    <updated>2017-09-18T13:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-使用场景"><a href="#一-使用场景" class="headerlink" title="一.使用场景"></a>一.使用场景</h4><p>现在我们假设有100台redis data服务器，一份数据101进来的时候，以散列公式hash(i)&amp;100，计算所存放的服务器，假设hash(i) = i,那么数据被散列到标号为1的服务器,然后这个时候服务器新增了一台，然后散列公式为hash(i)%101，这个时候请求访问数据101的时候，被分配至0号服务器，但是其实这个时候数据是在1号服务器的。<br>所以这个时候大量的数据失效了（访问不到了）。<br><a id="more"></a><br>所以这个时候，我们假设是新增了服务器，如果是持久化存储的，我们可以让服务器集群对数据进行重新散列，进行数据迁移，然后进行恢复，但是这个时候就意味着每次增减服务器的时候，集群就需要大量的通信，进行数据迁移，这个开销是非常大的。如果只是缓存，那么缓存就都失效了。所以这个时候怎么办？<br>我们可以看到，关键问题在于，服务器数量变动的时候，要能够保证旧的数据能够按照老的算法，计算到数据所在的服务器，而新的数据能够按照新的散列算法，计算出数据所在的服务器。<br>如，我们有ABCD四台服务器，这四台服务器被分配至0~232 的一个环上，比如0~230的存储在A服务器，230 +1~231 存储到B服务器上…..CD按照这样的进行均分。将我们的散列空间也划为0~232 ，然后数据进来后对232 取模，得到一个值K1，我们根据K1在环上所处的位置，得到所分配到的服务器，如图，K1被分配到B服务器。 这个时候，我们有一台服务器B失效了。<br>我们可以看到，如果是B失效了，那么如果有持久化存储的，需要做数据恢复，将B的数据迁移至C即可，对于原本散列在A和D的数据，不需要做任何改变。 同理，如果我们是新增了服务器，那么只需要对一台服务器的数据迁移一部分至新加的服务器即可。<br>一致性hash算法，减少了数据映射关系的变动，不会像hash(i)%N那样带来全局的变动<br>而且这样还有个好处，假设我们使用UID作为散列范围（即上面的232 ）,那么假设有部分UID的访问很频繁，而且这部分UID集中在B服务器上，那么就造成了B的负载远远高于其他服务器。这就是热点数据的问题。这个时候我们可以向B所在的UID空间添加服务器，减少B的压力。<br>其实还有个更好的解决办法：虚拟节点。<br>上面说的情况是，使用真实的服务器作为节点散列在232 上。 我们假设，只有4台服务器，然后A上面有热点数据，结果A挂掉了，然后做数据恢复，A的数据迁移至B，然后B需要承受A+B的数据，也承受不住，也挂了。。。。然后继续CD都挂了。这就造成了</p>
<h4 id="二-哈希算法判定标准"><a href="#二-哈希算法判定标准" class="headerlink" title="二.哈希算法判定标准"></a>二.哈希算法判定标准</h4><p>一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义：</p>
<ol>
<li>平衡性(Balance)：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。</li>
<li>单调性(Monotonicity)：单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到原有的或者新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</li>
<li>分散性(Spread)：在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性。</li>
<li>负载(Load)：负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同 的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。</li>
</ol>
<h4 id="三-要点总结："><a href="#三-要点总结：" class="headerlink" title="三.要点总结："></a>三.要点总结：</h4><ol>
<li>所谓的哈希算法，就是尽量做到随机无序，如果数据量足够的话，就可以看作是打乱顺序、平均分配位置的算法。</li>
<li>新增的redis物理节点，必须经过哈希算法，获取到n个虚拟节点（分身），每个虚拟节点遵循顺时针原则，管理散列在哈希环（哈希桶）上对应的对象（http请求）；</li>
<li>这样，即便是新增或者删除真实的节点，都不会影响太大，因为每个真实的redis节点都可以看作是平均分配在整个系统当中的，1个节点的失效最多引起n个虚拟节点的实效，考虑到虚拟节点有散列平均分配的性质，基本不会造成灾难性影响。</li>
</ol>
<h4 id="四-相关链接："><a href="#四-相关链接：" class="headerlink" title="四.相关链接："></a>四.相关链接：</h4><ol>
<li><a href="https://coolshell.cn/articles/10910.html" target="_blank" rel="external">https://coolshell.cn/articles/10910.html</a><br>2.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一-使用场景&quot;&gt;&lt;a href=&quot;#一-使用场景&quot; class=&quot;headerlink&quot; title=&quot;一.使用场景&quot;&gt;&lt;/a&gt;一.使用场景&lt;/h4&gt;&lt;p&gt;现在我们假设有100台redis data服务器，一份数据101进来的时候，以散列公式hash(i)&amp;amp;100，计算所存放的服务器，假设hash(i) = i,那么数据被散列到标号为1的服务器,然后这个时候服务器新增了一台，然后散列公式为hash(i)%101，这个时候请求访问数据101的时候，被分配至0号服务器，但是其实这个时候数据是在1号服务器的。&lt;br&gt;所以这个时候大量的数据失效了（访问不到了）。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jasonlife.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="算法" scheme="http://jasonlife.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>19一些专业术语解析</title>
    <link href="http://jasonlife.top/2017/09/15/19%E4%B8%80%E4%BA%9B%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E8%A7%A3%E6%9E%90/"/>
    <id>http://jasonlife.top/2017/09/15/19一些专业术语解析/</id>
    <published>2017-09-15T07:32:22.000Z</published>
    <updated>2017-09-18T13:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>语法糖:语法糖就是为了避免coder出现错误并提高效率的语法层面的一种优雅的解决方案。在计算机科学中，语法糖(syntactic sugar)是指编程语言中可以更容易的表达一个操作的语法，它可以使程序员更加容易去使用这门语言：操作可以变得更加清晰、方便，或者更加符合程序员的编程习惯。<br>相当于汉语里的成语,即用更简练的言语表达较复杂的含义。<a id="more"></a>在得到广泛接受的情况之下，可以提升交流的效率。Java中的泛型，变长参数，自动拆箱/装箱，条件编译等都是。<br>2.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;语法糖:语法糖就是为了避免coder出现错误并提高效率的语法层面的一种优雅的解决方案。在计算机科学中，语法糖(syntactic sugar)是指编程语言中可以更容易的表达一个操作的语法，它可以使程序员更加容易去使用这门语言：操作可以变得更加清晰、方便，或者更加符合程序员的编程习惯。&lt;br&gt;相当于汉语里的成语,即用更简练的言语表达较复杂的含义。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jasonlife.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java 专业术语" scheme="http://jasonlife.top/tags/Java-%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>从Paxos到Zookeeper分布式一致性原理与实践</title>
    <link href="http://jasonlife.top/2017/08/14/18%E4%BB%8EPaxos%E5%88%B0Zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://jasonlife.top/2017/08/14/18从Paxos到Zookeeper分布式一致性原理与实践/</id>
    <published>2017-08-14T10:07:19.000Z</published>
    <updated>2017-09-18T13:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-分布式架构"><a href="#一-分布式架构" class="headerlink" title="一.分布式架构"></a>一.分布式架构</h4><ol>
<li>从集中式到分布式</li>
<li>从ACID到CAP/BASE<a id="more"></a>
</li>
</ol>
<h4 id="二-一致性协议"><a href="#二-一致性协议" class="headerlink" title="二.一致性协议"></a>二.一致性协议</h4><p>经典的一致性协议和算法为:两段式提交、三段式提交和PAXOS算法</p>
<h5 id="1-2PC-Two-Phase-Commit"><a href="#1-2PC-Two-Phase-Commit" class="headerlink" title="1.2PC Two-Phase-Commit"></a>1.2PC Two-Phase-Commit</h5><ol>
<li>绝大多数分布式数据库都是采用二段式提交协议来完成分布式协议处理的。</li>
<li>包括两个阶段:提交事务请求和执行事务提交</li>
<li>优点: 1.原理简单 2.实现方便</li>
<li>缺点; 1.同步阻塞 2.单点问题 3.脑裂 4.太过保守</li>
</ol>
<h5 id="2-分布式系统常见问题"><a href="#2-分布式系统常见问题" class="headerlink" title="2.分布式系统常见问题"></a>2.分布式系统常见问题</h5><p>数据冗余情况下考虑数据的一致性和性能的问题。简单说来：</p>
<ol>
<li>要想让数据有高可用性，就得写多份数据。</li>
<li>写多份的问题会导致数据一致性的问题。</li>
<li>数据一致性的问题又会引发性能问题</li>
</ol>
<h5 id="3-一致性模型、"><a href="#3-一致性模型、" class="headerlink" title="3.一致性模型、"></a>3.一致性模型、</h5><p>说起数据一致性来说，简单说有三种类型（当然，如果细分的话，还有很多一致性模型，如：顺序一致性，FIFO一致性，会话一致性，单读一致性，单写一致性，但为了本文的简单易读，我只说下面三种）：</p>
<ol>
<li>Weak 弱一致性：当你写入一个新值后，读操作在数据副本上可能读出来，也可能读不出来。比如：某些cache系统，网络游戏其它玩家的数据和你没什么关系，VOIP这样的系统，或是百度搜索引擎（呵呵）。</li>
<li>Eventually 最终一致性：当你写入一个新值后，有可能读不出来，但在某个时间窗口之后保证最终能读出来。比如：DNS，电子邮件、Amazon S3，Google搜索引擎这样的系统。</li>
<li>Strong 强一致性：新的数据一旦写入，在任意副本任意时刻都能读到新值。比如：文件系统，RDBMS，Azure Table都是强一致性的。</li>
</ol>
<p>具体细分:</p>
<ol>
<li>Master-Slave: 读写请求都由Master负责,写请求写到Master上后，由Master同步到Slave上。</li>
<li>Master-Master: Master-Master，又叫Multi-master，是指一个系统存在两个或多个Master，每个Master都提供read-write服务。这个模型是Master-Slave的加强版，数据间同步一般是通过Master间的异步完成，所以是最终一致性。</li>
<li>Two/Three Phase Commit:<br>2PC:<br>第一阶段：<br>协调者会问所有的参与者结点，是否可以执行提交操作。<br>各个参与者开始事务执行的准备工作：如：为资源上锁，预留资源，写undo/redo log……<br>参与者响应协调者，如果事务的准备工作成功，则回应“可以提交”，否则回应“拒绝提交”。<br>第二阶段：<br>如果所有的参与者都回应“可以提交”，那么，协调者向所有的参与者发送“正式提交”的命令。参与者完成正式提交，并释放所有资源，然后回应“完成”，协调者收集各结点的“完成”回应后结束这个Global Transaction。<br>如果有一个参与者回应“拒绝提交”，那么，协调者向所有的参与者发送“回滚操作”，并释放所有资源，然后回应“回滚完成”，协调者收集各结点的“回滚”回应后，取消这个Global Transaction。<br>2PC存在问题:<br>1）如果第一阶段中，参与者没有收到询问请求，或是参与者的回应没有到达协调者。那么，需要协调者做超时处理，一旦超时，可以当作失败，也可以重试。<br>2）如果第二阶段中，正式提交发出后，如果有的参与者没有收到，或是参与者提交/回滚后的确认信息没有返回，一旦参与者的回应超时，要么重试，要么把那个参与者标记为问题结点剔除整个集群，这样可以保证服务结点都是数据一致性的。<br>3）糟糕的情况是，第二阶段中，如果参与者收不到协调者的commit/fallback指令，参与者将处于“状态未知”阶段，参与者完全不知道要怎么办，比如：如果所有的参与者完成第一阶段的回复后（可能全部yes，可能全部no，可能部分yes部分no），如果协调者在这个时候挂掉了。那么所有的结点完全不知道怎么办（问别的参与者都不行）。为了一致性，要么死等协调者，要么重发第一阶段的yes/no命令。<br>为了解决第三种问题,单点问题,发明了3PC:</li>
<li>Two Generals Problem（两将军问题）: 试图通过建立在一个不可靠的连接上的交流来协调一项行动的隐患和设计上的巨大挑战。</li>
<li>拜占庭将军问题 (Byzantine Generals Problem):</li>
<li>Paxos算法: Paxos 算法解决的问题是在一个可能发生上述异常的分布式系统中如何就某个值达成一致，保证不论发生以上任何异常，都不会破坏决议的一致性。Paxos的目的是让整个集群的结点对某个值的变更达成一致。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一-分布式架构&quot;&gt;&lt;a href=&quot;#一-分布式架构&quot; class=&quot;headerlink&quot; title=&quot;一.分布式架构&quot;&gt;&lt;/a&gt;一.分布式架构&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;从集中式到分布式&lt;/li&gt;
&lt;li&gt;从ACID到CAP/BASE&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://jasonlife.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Java Paxos Zookeeper" scheme="http://jasonlife.top/tags/Java-Paxos-Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Guava初探</title>
    <link href="http://jasonlife.top/2017/07/25/17Guava%E5%88%9D%E6%8E%A2/"/>
    <id>http://jasonlife.top/2017/07/25/17Guava初探/</id>
    <published>2017-07-25T07:48:57.000Z</published>
    <updated>2017-07-25T07:49:22.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Guava" scheme="http://jasonlife.top/categories/Guava/"/>
    
    
      <category term="Java Guava" scheme="http://jasonlife.top/tags/Java-Guava/"/>
    
  </entry>
  
  <entry>
    <title>String-StringBuffer-StringBuilder性能对比</title>
    <link href="http://jasonlife.top/2017/07/21/16String-StringBuffer-StringBuilder%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
    <id>http://jasonlife.top/2017/07/21/16String-StringBuffer-StringBuilder性能对比/</id>
    <published>2017-07-21T11:42:56.000Z</published>
    <updated>2017-07-21T11:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>String-StringBuffer-StringBuilder性能对比,以及常见的几道面试题。<br><a id="more"></a><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">package com.meng.Jason.standard;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by MengDexin.</div><div class="line"> * Date : 17/7/21.</div><div class="line"> * Time : 17:51.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> StringTest &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> time = <span class="number">50000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        testString();</div><div class="line">        testStringBuffer();</div><div class="line">        testStringBuilder();</div><div class="line">        test1String();</div><div class="line">        test2String();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> testString() &#123;</div><div class="line">        <span class="keyword">String</span> s = <span class="string">""</span>;</div><div class="line">        <span class="keyword">long</span> <span class="built_in">begin</span> = System.currentTimeMillis();</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</div><div class="line">            s += <span class="string">"java"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> over = System.currentTimeMillis();</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"操作"</span> + s.getClass().getName() + <span class="string">"类型使用的时间为："</span> + (over - <span class="built_in">begin</span>) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> testStringBuffer() &#123;</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">long</span> <span class="built_in">begin</span> = System.currentTimeMillis();</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</div><div class="line">            sb.append(<span class="string">"java"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> over = System.currentTimeMillis();</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"操作"</span> + sb.getClass().getName() + <span class="string">"类型使用的时间为："</span> + (over - <span class="built_in">begin</span>) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> testStringBuilder() &#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">long</span> <span class="built_in">begin</span> = System.currentTimeMillis();</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</div><div class="line">            sb.append(<span class="string">"java"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> over = System.currentTimeMillis();</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"操作"</span> + sb.getClass().getName() + <span class="string">"类型使用的时间为："</span> + (over - <span class="built_in">begin</span>) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> test1String() &#123;</div><div class="line">        <span class="keyword">long</span> <span class="built_in">begin</span> = System.currentTimeMillis();</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</div><div class="line">            <span class="keyword">String</span> s = <span class="string">"I"</span> + <span class="string">"love"</span> + <span class="string">"java"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> over = System.currentTimeMillis();</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"字符串直接相加操作："</span> + (over - <span class="built_in">begin</span>) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> test2String() &#123;</div><div class="line">        <span class="keyword">String</span> s1 = <span class="string">"I"</span>;</div><div class="line">        <span class="keyword">String</span> s2 = <span class="string">"love"</span>;</div><div class="line">        <span class="keyword">String</span> s3 = <span class="string">"java"</span>;</div><div class="line">        <span class="keyword">long</span> <span class="built_in">begin</span> = System.currentTimeMillis();</div><div class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</div><div class="line">            <span class="keyword">String</span> s = s1 + s2 + s3;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> over = System.currentTimeMillis();</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"字符串间接相加操作："</span> + (over - <span class="built_in">begin</span>) + <span class="string">"毫秒"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">操作java<span class="selector-class">.lang</span><span class="selector-class">.String</span>类型使用的时间为：<span class="number">2457</span>毫秒</div><div class="line">操作java<span class="selector-class">.lang</span><span class="selector-class">.StringBuffer</span>类型使用的时间为：<span class="number">6</span>毫秒</div><div class="line">操作java<span class="selector-class">.lang</span><span class="selector-class">.StringBuilder</span>类型使用的时间为：<span class="number">2</span>毫秒</div><div class="line">字符串直接相加操作：<span class="number">1</span>毫秒</div><div class="line">字符串间接相加操作：<span class="number">7</span>毫秒</div></pre></td></tr></table></figure></p>
<p>分析:</p>
<ol>
<li>对于直接相加字符串，效率很高，因为在编译器便确定了它的值，也就是说形如”I”+”love”+”java”; 的字符串相加，在编译期间便被优化成了”Ilovejava”。这个可以用javap -c命令反编译生成的class文件进行验证。</li>
<li>String、StringBuilder、StringBuffer三者的执行效率：<br>　　StringBuilder(线程不安全的) &gt; StringBuffer(线程安全的) &gt; String<br>　　当然这个是相对的，不一定在所有情况下都是这样。<br>　　比如String str = “hello”+ “world”的效率就比 StringBuilder st  = new StringBuilder().append(“hello”).append(“world”)要高。<br>　　因此，这三个类是各有利弊，应当根据不同的情况来进行选择使用：<br>　　当字符串相加操作或者改动较少的情况下，建议使用 String str=”hello”这种形式；<br>　　当字符串相加操作较多的情况下，建议使用StringBuilder，如果采用了多线程，则使用StringBuffer。</li>
<li>下面这段代码的输出结果是什么？<br>　　String a = “hello2”; 　　String b = “hello” + 2; 　　System.out.println((a == b));<br>　　输出结果为：true。原因很简单，”hello”+2在编译期间就已经被优化成”hello2”，因此在运行期间，变量a和变量b指向的是同一个对象。</li>
<li>下面这段代码的输出结果是什么？<br>　　String a = “hello2”; 　  String b = “hello”;       String c = b + 2;       System.out.println((a == c));<br>　　输出结果为:false。由于有符号引用的存在，所以  String c = b + 2;不会在编译期间被优化，不会把b+2当做字面常量来处理的，因此这种方式生成的对象事实上是保存在堆上的。因此a和c指向的并不是同一个对象。</li>
<li>下面这段代码的输出结果是什么？<br>　　String a = “hello2”;   　 final String b = “hello”;       String c = b + 2;       System.out.println((a == c));<br>　　输出结果为：true。对于被final修饰的变量，会在class文件常量池中保存一个副本，也就是说不会通过连接而进行访问，对final变量的访问在编译期间都会直接被替代为真实的值。那么String c = b + 2;在编译期间就会被优化成：String c = “hello” + 2;</li>
<li>请别再拿“String s = new String(“xyz”);创建了多少个String实例”来面试了吧 <a href="http://rednaxelafx.iteye.com/blog/774673/" target="_blank" rel="external">http://rednaxelafx.iteye.com/blog/774673/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;String-StringBuffer-StringBuilder性能对比,以及常见的几道面试题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://jasonlife.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jasonlife.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java编程实战知识点</title>
    <link href="http://jasonlife.top/2017/07/21/15Java%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://jasonlife.top/2017/07/21/15Java编程实战知识点/</id>
    <published>2017-07-21T08:23:41.000Z</published>
    <updated>2017-07-21T08:24:20.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Java" scheme="http://jasonlife.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jasonlife.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA反射详解和优化</title>
    <link href="http://jasonlife.top/2017/07/19/14JAVA%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>http://jasonlife.top/2017/07/19/14JAVA反射详解和优化/</id>
    <published>2017-07-19T11:32:28.000Z</published>
    <updated>2017-07-20T08:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-何为反射机制"><a href="#1-何为反射机制" class="headerlink" title="1.何为反射机制"></a>1.何为反射机制</h3><p>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。<br><a id="more"></a></p>
<h3 id="2-反射的应用场景"><a href="#2-反射的应用场景" class="headerlink" title="2.反射的应用场景"></a>2.反射的应用场景</h3><ol>
<li>在运行时判断任意一个对象所属的类；</li>
<li>在运行时构造任意一个类的对象；</li>
<li>在运行时判断任意一个类所具有的成员变量和方法；</li>
<li>在运行时调用任意一个对象的方法；</li>
<li>生成动态代理；</li>
</ol>
<h3 id="3-反射机制相关API"><a href="#3-反射机制相关API" class="headerlink" title="3.反射机制相关API"></a>3.反射机制相关API</h3><ol>
<li><p>通过一个对象获得完整的包名和类名</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestReflect</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws Exception </span>&#123;</div><div class="line">        TestReflect testReflect = <span class="keyword">new</span> TestReflect();</div><div class="line">        System.<span class="keyword">out</span>.println(testReflect.getClass().getName());</div><div class="line">        <span class="comment">// 结果 com.gemini.test.TestReflect</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实例化Class类对象</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestReflect &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; class1 = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; class2 = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; class3 = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 一般采用这种形式</span></div><div class="line">        class1 = <span class="keyword">Class</span>.forName(<span class="string">"com.gemini.test.TestReflect"</span>);</div><div class="line">        class2 = <span class="keyword">new</span> TestReflect().getClass();</div><div class="line">        class3 = TestReflect.<span class="keyword">class</span>;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"类名称   "</span> + class1.getName());</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"类名称   "</span> + class2.getName());</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"类名称   "</span> + class3.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取一个对象的父类与实现的接口</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestReflect <span class="keyword">implements</span> Serializable &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2862585049955236662</span>L;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; clazz = <span class="keyword">Class</span>.forName(<span class="string">"net.xsoftlab.baike.TestReflect"</span>);</div><div class="line">        <span class="comment">// 取得父类</span></div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; parentClass = clazz.getSuperclass();</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"clazz的父类为："</span> + parentClass.getName());</div><div class="line">        <span class="comment">// clazz的父类为： java.lang.Object</span></div><div class="line">        <span class="comment">// 获取所有的接口</span></div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; intes[] = clazz.getInterfaces();</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"clazz实现的接口有："</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intes.length; i++) &#123;</div><div class="line">            System.out.<span class="keyword">println</span>((i + <span class="number">1</span>) + <span class="string">"："</span> + intes[i].getName());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// clazz实现的接口有：</span></div><div class="line">        <span class="comment">// 1：java.io.Serializable</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过反射机制实例化一个类的对象</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">import java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestReflect</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws Exception </span>&#123;</div><div class="line">        Class&lt;?&gt; class1 = <span class="literal">null</span>;</div><div class="line">        class1 = Class.forName(<span class="string">"com.gemini.test.User"</span>);</div><div class="line">        <span class="comment">// 第一种方法，实例化默认构造方法，调用set赋值</span></div><div class="line">        User user = (User) class1.newInstance();</div><div class="line">        user.setAge(<span class="number">20</span>);</div><div class="line">        user.setName(<span class="string">"Rollen"</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(user); <span class="comment">// 结果 User [age=20, name=Rollen]</span></div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法 取得全部的构造函数 使用构造函数赋值</span></div><div class="line">        Constructor&lt;?&gt; cons[] = class1.getConstructors();</div><div class="line">        <span class="comment">// 查看每个构造方法需要的参数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cons.length; i++) &#123;</div><div class="line">            Class&lt;?&gt; clazzs[] = cons[i].getParameterTypes();</div><div class="line">            System.<span class="keyword">out</span>.print(<span class="string">"cons["</span> + i + <span class="string">"] ("</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; clazzs.length; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (j == clazzs.length - <span class="number">1</span>)</div><div class="line">                    System.<span class="keyword">out</span>.print(clazzs[j].getName());</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    System.<span class="keyword">out</span>.print(clazzs[j].getName() + <span class="string">","</span>);</div><div class="line">            &#125;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">")"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 结果</span></div><div class="line">        <span class="comment">// cons[0] (java.lang.String)</span></div><div class="line">        <span class="comment">// cons[1] (int,java.lang.String)</span></div><div class="line">        <span class="comment">// cons[2] ()</span></div><div class="line">        user = (User) cons[<span class="number">0</span>].newInstance(<span class="string">"Rollen"</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(user);</div><div class="line">        <span class="comment">// 结果 User [age=0, name=Rollen]</span></div><div class="line">        user = (User) cons[<span class="number">1</span>].newInstance(<span class="number">20</span>, <span class="string">"Rollen"</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(user);</div><div class="line">        <span class="comment">// 结果 User [age=20, name=Rollen]</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> <span class="title">User</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        super();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params">String name</span>) </span>&#123;</div><div class="line">        super();</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params"><span class="keyword">int</span> age, String name</span>) </span>&#123;</div><div class="line">        super();</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span>(<span class="params"><span class="keyword">int</span> age</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> String <span class="title">toString</span>(<span class="params"></span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User [age="</span> + age + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取某个类的全部属性</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestReflect <span class="keyword">implements</span> Serializable &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2862585049955236662</span>L;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">Class</span>&lt;?&gt; clazz = <span class="keyword">Class</span>.forName(<span class="string">"com.gemini.test.TestReflect"</span>);</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"===============本类属性==============="</span>);</div><div class="line">        Field[] field = clazz.getDeclaredFields(); <span class="comment">// 取得本类的全部属性</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; field.length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> mo = field[i].getModifiers();<span class="comment">// 权限修饰符</span></div><div class="line">            String priv = Modifier.toString(mo);</div><div class="line">            <span class="keyword">Class</span>&lt;?&gt; type = field[i].getType();<span class="comment">// 属性类型</span></div><div class="line">            System.out.<span class="keyword">println</span>(priv + <span class="string">" "</span> + type.getName() + <span class="string">" "</span> + field[i].getName() + <span class="string">";"</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"==========实现的接口或者父类的属性=========="</span>);</div><div class="line">        Field[] filed1 = clazz.getFields(); <span class="comment">// 取得实现的接口或者父类的属性</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; filed1.length; j++) &#123;</div><div class="line">            <span class="keyword">int</span> mo = filed1[j].getModifiers();<span class="comment">// 权限修饰符</span></div><div class="line">            String priv = Modifier.toString(mo);</div><div class="line">            <span class="keyword">Class</span>&lt;?&gt; type = filed1[j].getType();<span class="comment">// 属性类型</span></div><div class="line">            System.out.<span class="keyword">println</span>(priv + <span class="string">" "</span> + type.getName() + <span class="string">" "</span> + filed1[j].getName() + <span class="string">";"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取某个类的全部方法</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> <span class="keyword">implements</span> <span class="title">Serializable</span> &#123;</span></div><div class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = -<span class="number">2862585049955236662</span>L;</div><div class="line">    <span class="keyword">public</span> static void main(String[] args) throws Exception &#123;</div><div class="line">        <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">clazz</span> = <span class="title">Class</span>.<span class="title">forName</span>("<span class="title">com</span>.<span class="title">gemini</span>.<span class="title">test</span>.<span class="title">TestReflect</span>");</span></div><div class="line">        <span class="function"><span class="keyword">Method</span> <span class="title">method</span>[] =</span> clazz.getMethods();</div><div class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="function"><span class="keyword">method</span>.<span class="title">length</span>; ++<span class="title">i</span>) &#123;</span></div><div class="line">            <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">returnType</span> = <span class="title">method</span>[<span class="title">i</span>].<span class="title">getReturnType</span>();</span></div><div class="line">            <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">para</span>[] = <span class="title">method</span>[<span class="title">i</span>].<span class="title">getParameterTypes</span>();</span></div><div class="line">            int temp = <span class="function"><span class="keyword">method</span>[<span class="title">i</span>].<span class="title">getModifiers</span>(</span>);</div><div class="line">            System.out.<span class="built_in">print</span>(Modifier.toString(temp) + <span class="string">" "</span>);</div><div class="line">            System.out.<span class="built_in">print</span>(returnType.getName() + <span class="string">"  "</span>);</div><div class="line">            System.out.<span class="built_in">print</span>(<span class="function"><span class="keyword">method</span>[<span class="title">i</span>].<span class="title">getName</span>(</span>) + <span class="string">" "</span>);</div><div class="line">            System.out.<span class="built_in">print</span>(<span class="string">"("</span>);</div><div class="line">            <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; para.length; ++j) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(para[j].getName() + <span class="string">" "</span> + <span class="string">"arg"</span> + j);</div><div class="line">                <span class="keyword">if</span> (j &lt; para.length - <span class="number">1</span>) &#123;</div><div class="line">                    System.out.<span class="built_in">print</span>(<span class="string">","</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">exce</span>[] = <span class="title">method</span>[<span class="title">i</span>].<span class="title">getExceptionTypes</span>();</span></div><div class="line">            <span class="keyword">if</span> (exce.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">") throws "</span>);</div><div class="line">                <span class="keyword">for</span> (int k = <span class="number">0</span>; k &lt; exce.length; ++k) &#123;</div><div class="line">                    System.out.<span class="built_in">print</span>(exce[k].getName() + <span class="string">" "</span>);</div><div class="line">                    <span class="keyword">if</span> (k &lt; exce.length - <span class="number">1</span>) &#123;</div><div class="line">                        System.out.<span class="built_in">print</span>(<span class="string">","</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.<span class="built_in">print</span>(<span class="string">")"</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过反射机制调用某个类的方法</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestReflect &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) throws Exception &#123;</div><div class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"net.xsoftlab.baike.TestReflect"</span>);</div><div class="line">        <span class="comment">// 调用TestReflect类中的reflect1方法</span></div><div class="line">        Method method = clazz.getMethod(<span class="string">"reflect1"</span>);</div><div class="line">        method.invoke(clazz.newInstance());</div><div class="line">        <span class="comment">// Java 反射机制 - 调用某个类的方法1.</span></div><div class="line">        <span class="comment">// 调用TestReflect的reflect2方法</span></div><div class="line">        method = clazz.getMethod(<span class="string">"reflect2"</span>, <span class="keyword">int</span>.<span class="keyword">class</span>, <span class="keyword">String</span>.<span class="keyword">class</span>);</div><div class="line">        method.invoke(clazz.newInstance(), <span class="number">20</span>, <span class="string">"张三"</span>);</div><div class="line">        <span class="comment">// Java 反射机制 - 调用某个类的方法2.</span></div><div class="line">        <span class="comment">// age -&gt; 20. name -&gt; 张三</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reflect1() &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Java 反射机制 - 调用某个类的方法1."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> reflect2(<span class="keyword">int</span> age, <span class="keyword">String</span> name) &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Java 反射机制 - 调用某个类的方法2."</span>);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"age -&gt; "</span> + age + <span class="string">". name -&gt; "</span> + name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过反射机制操作某个类的属性</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> proprety = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws Exception &#123;</div><div class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"net.xsoftlab.baike.TestReflect"</span>);</div><div class="line">        Object obj = clazz.<span class="keyword">new</span><span class="type">Instance</span>();</div><div class="line">        <span class="comment">// 可以直接对 private 的属性赋值</span></div><div class="line">        Field field = clazz.getDeclaredField(<span class="string">"proprety"</span>);</div><div class="line">        field.setAccessible(<span class="literal">true</span>);</div><div class="line">        field.<span class="keyword">set</span>(obj, <span class="string">"Java反射机制"</span>);</div><div class="line">        System.out.println(field.<span class="keyword">get</span>(obj));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>反射机制的动态代理</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取类加载器的方法</span></div><div class="line">TestReflect testReflect = <span class="keyword">new</span> <span class="type">TestReflect</span>();</div><div class="line">        System.out.println(<span class="string">"类加载器  "</span> + testReflect.getClass().getClassLoader().getClass().getName());</div><div class="line"><span class="keyword">package</span> com.gemini.test;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="comment">//定义项目接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> say(<span class="keyword">String</span> name, int age);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 定义真实项目</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Subject</span></span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> say(<span class="keyword">String</span> name, int age) &#123;</div><div class="line">        <span class="keyword">return</span> name + <span class="string">"  "</span> + age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">InvocationHandler</span></span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object obj = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">public</span> Object bind(Object obj) &#123;</div><div class="line">        <span class="built_in">this</span>.obj = obj;</div><div class="line">        <span class="keyword">return</span> Proxy.<span class="keyword">new</span><span class="type">ProxyInstance</span>(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), <span class="built_in">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</div><div class="line">        Object temp = method.invoke(<span class="built_in">this</span>.obj, args);</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 在java中有三种类类加载器。</div><div class="line"> *</div><div class="line"> * 1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。</div><div class="line"> *</div><div class="line"> * 2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jrelibext目录中的类</div><div class="line"> *</div><div class="line"> * 3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。</div><div class="line"> *</div><div class="line"> * 如果想要完成动态代理，首先需要定义一个InvocationHandler接口的子类，已完成代理的具体操作。</div><div class="line"> *</div><div class="line"> * @author xsoftlab.net</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws Exception &#123;</div><div class="line">        MyInvocationHandler demo = <span class="keyword">new</span> <span class="type">MyInvocationHandler</span>();</div><div class="line">        Subject sub = (Subject) demo.bind(<span class="keyword">new</span> <span class="type">RealSubject</span>());</div><div class="line">        <span class="keyword">String</span> info = sub.say(<span class="string">"Rollen"</span>, <span class="number">20</span>);</div><div class="line">        System.out.println(info);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将反射机制应用于工厂模式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">fruit</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">fruit</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Apple"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">fruit</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Orange"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> fruit <span class="title">getInstance</span><span class="params">(String ClassName)</span> </span>&#123;</div><div class="line">        fruit f = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            f = (fruit) Class.forName(ClassName).newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对于普通的工厂模式当我们在添加一个子类的时候，就需要对应的修改工厂类。 当我们添加很多的子类的时候，会很麻烦。</div><div class="line"> * Java 工厂模式可以参考</div><div class="line"> * http://baike.xsoftlab.net/view/java-factory-pattern</div><div class="line"> *</div><div class="line"> * 现在我们利用反射机制实现工厂模式，可以在不修改工厂类的情况下添加任意多个子类。</div><div class="line"> * 但是有一点仍然很麻烦，就是需要知道完整的包名和类名，这里可以使用properties配置文件来完成。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        fruit f = Factory.getInstance(<span class="string">"com.gemini.test.Apple"</span>);</div><div class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</div><div class="line">            f.eat();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="4-反射机制优化"><a href="#4-反射机制优化" class="headerlink" title="4.反射机制优化"></a>4.反射机制优化</h3><ol>
<li>描述<br>从事java开发的都知道反射的运行速度慢，所以很多java的开发者都对反射机制的使用望而却步(包括BME组件SDO)。我想知道，究竟反射机制慢在哪里？有没有改进方法，让我们可以继续使用它？如果一个好东西因为其自身的一些缺陷而不使用它，那么实在可惜，反射也是这样。我想说的是：我们应该一点点的改进它。</li>
<li>错误的使用方法<br>错误的使用方法是每次需要获取Class的对象时都使用Class.forName方法，或者需要调用Class对象上的方法时都调用getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)或getMethod(String name, Class&lt;?&gt;… parameterTypes)方法获取Method对象，再调用其上的invoke(Object obj, Object… args)方法。<br>这里存在两个容易造成性能损耗的地方：<br>Class.forName方法的调用会执行Class类文件在整个类路径下的搜索，频繁调用比较影响性能。<br>Class对象上的getDeclaredMethod (String, Class&lt;?&gt;…)或getMethod(String, Class&lt;?&gt;…)方法的调用会执行Method对象在Class对象上的搜索。有些同事还使用getMethods()方法获取Method数组，然后执行搜索任务，实际上getMethods()还会执行方法对象的集体Copy比直接使用(String, Class&lt;?&gt;…)或getMethod(String, Class&lt;?&gt;…)方法还要消耗时间及空间。</li>
<li>Cache思想<br>Cache的思想是将需要的反射中间件给存储下来，以便以后使用。不管使用什么方法获取Class对象上的Method对象，返回的都是Method对象的copy对象。这些copy对象有的只是使用一次就被回收了，未免有些可惜。我们可这以将这些对象给缓存下来，以便以后使用。而在存储数据结构中，无疑HashMap的查找速度是最快的，它主要是通过对象的Hash码进行一次查找，速度超快。但是HashMap上的操作不是线程安全的，需要改进方法实现同步。</li>
<li>具体实现<br>需要两个组件ClassInfo和ReflectionCache。<br>ClassInfo主要保存Class对象的信息，主要是方法Map。其中ClassInfo中包括三部分方法的Map: Getter, Setter, Other。Getter是Class的属性的获取方法，Setter是Class的属性的设置方法，Other是其它方法。需要注意的是Getter和Setter的方法需要完全符合Javabean规范(isXXX方法属于Getter方法范围内)，其key值是方法对应的属性名。Other方法是除Getter和Setter以外的其它方法。<br>ReflectionCache组件主要是通过HashMap对ClassInfo进行缓存。缓存的键值是ClassInfo中Class对象的全称。如一个String对象，它缓存的键值就是java.lang.String。并且ReflectionCache提供了几种不同get和put方法来方便用户的操作。<br>另外ClassInfo的生成需要用到ClassInfoUtils工具。它的主要工作是创建ClassInfo对象，其中创建ClassInfo时可以提供Method Type信息来指定缓存的方法类型（如：所有方法-All、存取器方法-Access、获取方法-Getter和设置方法-Setter）。</li>
<li>同步控制<br>ReflectionCache中ClassInfoMap是一个静变量，那么随之而来的就是HashMap的同步问题。我对ReflectionCache的做了些改进，主要是对put方法的处理。首先HashMap的获取操作（get操作）没有加入同步操作，因此获取的操作是可以并发的。现在的问题在于如果获取不了ClassInfo对象时会要执行设置操作（set操作），此时并发问题随之而来。可能在同一时刻会有很多线程去设置ClassInfo，在第一个设置完ClassInfo的线程结束后，第二个线程应该停止设置ClassInfo。在此需求之上，我们需要对ReflectionCache的put操作上加上同步块，并且让put操作再执行一个额外的操作：返回添加到ClassInfoMap中的ClassInfo，不管它是不是其它线程添加的。因此我们在设置ClassInfo时，可以这样操作：<br>ClassInfo classInfo = ReflectionCache.putClassInfo(String.class);</li>
<li>改进效率<br>改进之后的效率的提高是明显的。主要是节省了中间变量创建及反射数据的查找时间。测试数据:<br>100000次，20个线程，无Class.forName操作<br>一般用法: 11375 milliseconds<br>ReflectionCache: 2562 milliseconds<br>100000次，20个线程，有Class.forName操作<br>一般用法: 16125 milliseconds<br>ReflectionCache: 4187 milliseconds<br>可见使用ReflectionCache明显提高了效率。</li>
</ol>
<p>伪代码如下：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.默认方式</div><div class="line">Class clazz = Class.forName(<span class="string">"com.dianping.csc.page_config.view.entity.ViewConfig"</span>)<span class="comment">;</span></div><div class="line">clazz.newInstance()<span class="comment">;</span></div><div class="line"><span class="number">2</span>.<span class="keyword">Cache加载Class</span></div><div class="line"><span class="keyword">CachedClass </span>classInfo = ReflectionCache.getCachedClass(ViewConfig.class)<span class="comment">;</span></div><div class="line">Class clazz = classInfo.getTheClass()<span class="comment">;</span></div><div class="line"><span class="number">3</span>.<span class="keyword">Cache加载Method</span></div><div class="line">MethodAccess methodAccess = MethodAccess.get(classInfo.getTheClass())<span class="comment">;</span></div><div class="line">methodAccess.invoke()<span class="comment">;</span></div><div class="line">clazz.newInstance()<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>引用用包如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.esotericsoftware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reflectasm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>程序示例：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"> *根据Body字符串，自动封装</div><div class="line"> * @param issueBody</div><div class="line"> * @param obj</div><div class="line"> * @return</div><div class="line"> * @throws CscConfigException</div><div class="line"> */</div><div class="line">public <span class="keyword">static</span> <span class="built_in">Object</span> setJavaBeanByRequestBody(<span class="built_in">String</span> issueBody, <span class="built_in">Object</span> obj) throws CscConfigException &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        JsonParser jsonParser = <span class="keyword">new</span> JsonParser();</div><div class="line"> JsonObject jsonObject = jsonParser.parse(issueBody).getAsJsonObject();</div><div class="line"> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; map = ObjectUtil.getObjectPro(obj.getClass());</div><div class="line"> <span class="built_in">Set</span>&lt;<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; mapping = map.entrySet();</div><div class="line"> MethodAccess methodAccess = MethodAccess.<span class="keyword">get</span>(obj.getClass());</div><div class="line"> <span class="keyword">for</span> (<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; me : mapping) &#123;</div><div class="line">            <span class="built_in">String</span> name = me.getKey();</div><div class="line"> <span class="built_in">String</span> type = me.getValue();</div><div class="line"> <span class="keyword">try</span>&#123;</div><div class="line">                <span class="built_in">int</span> index_ = methodAccess.getIndex(<span class="string">"set"</span> + StringUtil.toFirstUp(name));</div><div class="line"> <span class="keyword">if</span> (type.contains(<span class="string">"String"</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (jsonObject.<span class="keyword">get</span>(name) != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="built_in">String</span> setValue = <span class="string">""</span>;</div><div class="line"> <span class="keyword">try</span>&#123;</div><div class="line">                            setValue = jsonObject.<span class="keyword">get</span>(name).getAsString();</div><div class="line"> &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">                            setValue = jsonObject.<span class="keyword">get</span>(name).toString();</div><div class="line"> &#125;</div><div class="line">                        <span class="keyword">if</span> (setValue == <span class="keyword">null</span>) &#123;</div><div class="line">                            setValue = <span class="string">""</span>;</div><div class="line"> &#125;</div><div class="line">                        setValue = setValue.replace(<span class="string">"&amp;quot;"</span>, <span class="string">""</span>).replace(<span class="string">"&amp;nbsp;"</span>, <span class="string">""</span>);</div><div class="line"> methodAccess.invoke(obj,index_,setValue);</div><div class="line"> &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.contains(<span class="string">"Long"</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (jsonObject.<span class="keyword">get</span>(name) != <span class="keyword">null</span>) &#123;</div><div class="line">                        methodAccess.invoke(obj,index_,jsonObject.<span class="keyword">get</span>(name).getAsLong());</div><div class="line"> &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.contains(<span class="string">"Date"</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (jsonObject.<span class="keyword">get</span>(name) != <span class="keyword">null</span>) &#123;</div><div class="line">                        DateFormat dateformat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line"> Date date = dateformat.parse(jsonObject.<span class="keyword">get</span>(name).toString());</div><div class="line"></div><div class="line"> &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.contains(<span class="string">"Integer"</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (jsonObject.<span class="keyword">get</span>(name) != <span class="keyword">null</span>) &#123;</div><div class="line">                        methodAccess.invoke(obj,index_,jsonObject.<span class="keyword">get</span>(name).getAsInt());</div><div class="line"> &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> CscConfigException(<span class="number">100001</span>,<span class="string">"信息获取异常"</span>);</div><div class="line"> &#125;</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-何为反射机制&quot;&gt;&lt;a href=&quot;#1-何为反射机制&quot; class=&quot;headerlink&quot; title=&quot;1.何为反射机制&quot;&gt;&lt;/a&gt;1.何为反射机制&lt;/h3&gt;&lt;p&gt;反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://jasonlife.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jasonlife.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>常见Jar包简介</title>
    <link href="http://jasonlife.top/2017/07/19/13%E5%B8%B8%E8%A7%81Jar%E5%8C%85%E7%AE%80%E4%BB%8B/"/>
    <id>http://jasonlife.top/2017/07/19/13常见Jar包简介/</id>
    <published>2017-07-19T03:22:40.000Z</published>
    <updated>2017-07-21T08:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">了解一些Jar包的功能,分析部分类</div></pre></td></tr></table></figure>
<h4 id="rt-jar"><a href="#rt-jar" class="headerlink" title="rt.jar"></a>rt.jar</h4><h5 id="package-java-util"><a href="#package-java-util" class="headerlink" title="package java.util;"></a>package java.util;</h5><h4 id="javax-servlet-servlet-api"><a href="#javax-servlet-servlet-api" class="headerlink" title="javax.servlet:servlet-api"></a>javax.servlet:servlet-api</h4><ol>
<li><a href="http://tomcat.apache.org/tomcat-5.5-doc/servletapi/index.html" target="_blank" rel="external">http://tomcat.apache.org/tomcat-5.5-doc/servletapi/index.html</a><br>2.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;了解一
    
    </summary>
    
      <category term="Java" scheme="http://jasonlife.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jasonlife.top/tags/Java/"/>
    
  </entry>
  
</feed>
